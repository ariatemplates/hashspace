<script>
/*
 * Copyright 2012 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Taken from Aria Templates: https://github.com/ariatemplates/ariatemplates/blob/master/test/aria/touch/gestures/LongPress.js
 */

require("hsp/gestures/longPress").register();
var fireEvent=require("hsp/utils/eventgenerator").fireEvent,
    touchEventMap = require("hsp/gestures/touchEvent").touchEventMap;
</script>

<template test1(ctl)>
    <div title="test1" onlongpress="{ctl.handleEvent($event)}" onlongpressstart="{ctl.handleEvent($event)}" onlongpresscancel="{ctl.handleEvent($event)}">
        Hello!
    </div>
</template>

<script>
describe("LongPress gesture", function () {
    function validate(expected, result) {
        expect(expected.length).to.equal(result.length);
        for (var i = 0; i < expected.length; i ++) {
            expect(expected[i]).to.equal(result[i]);
        }
    }

    var clock;
    beforeEach(function () {
         clock = sinon.useFakeTimers();
     });

    afterEach(function () {
        clock.restore();
    });

    it("tests a cancel long press: touchstart, touchmove with 2 fingers", function () {
        var expected =  ["longpressstart", "longpresscancel"];
        var result = [];
        var ctl = {
            handleEvent : function (evt) {
                result.push(evt.type);
            }
        };
        var n = test1(ctl);
        fireEvent(touchEventMap.touchstart, n.node.firstChild, {
            isPrimary : true,
            touches : [{
                        clientX : 0,
                        clientY : 0
                    }],
            changedTouches : [{
                        clientX : 0,
                        clientY : 0
                    }]
        });
        fireEvent(touchEventMap.touchmove, n.node.firstChild, {
            isPrimary : false,
            touches : [{
                        clientX : 0,
                        clientY : 0
                    }, {
                        clientX : 5,
                        clientY : 5
                    }],
            changedTouches : [{
                        clientX : 5,
                        clientY : 5
                    }]
        });
        validate(expected, result);
        n.$dispose();
    });

    it("tests a cancel long press: touchstart, touchmove with distance > 10", function () {
        var expected =  ["longpressstart", "longpresscancel"];
        var result = [];
        var ctl = {
            handleEvent : function (evt) {
                result.push(evt.type);
            }
        };
        var n = test1(ctl);
        fireEvent(touchEventMap.touchstart, n.node.firstChild, {
            clientX : 0,
            clientY : 0
        });
        fireEvent(touchEventMap.touchmove, n.node.firstChild, {
            clientX : 100,
            clientY : 100
        });
        validate(expected, result);
        n.$dispose();
    });

    it("tests a not completed long press: touchstart, touchmove with distance <= 10, touchend within 1000ms", function () {
        var expected =  ["longpressstart", "longpresscancel"];
        var result = [];
        var ctl = {
            handleEvent : function (evt) {
                result.push(evt.type);
            }
        };
        var n = test1(ctl);
        fireEvent(touchEventMap.touchstart, n.node.firstChild, {
            clientX : 0,
            clientY : 0
        });
        fireEvent(touchEventMap.touchmove, n.node.firstChild, {
            clientX : 5,
            clientY : 5
        });
        clock.tick(990);
        fireEvent(touchEventMap.touchend, n.node.firstChild, {
            clientX : 5,
            clientY : 5
        });
        validate(expected, result);
        n.$dispose();
    });

    it("tests a valid long press: touchstart, touchmove with distance <= 10, wait 1010 ms", function () {
        var expected =  ["longpressstart", "longpress"];
        var result = [];
        var ctl = {
            handleEvent : function (evt) {
                result.push(evt.type);
            }
        };
        var n = test1(ctl);
        fireEvent(touchEventMap.touchstart, n.node.firstChild, {
            clientX : 0,
            clientY : 0
        });
        fireEvent(touchEventMap.touchmove, n.node.firstChild, {
            clientX : 5,
            clientY : 5
        });
        clock.tick(1010);
        validate(expected, result);
        n.$dispose();
    });

});
</script>