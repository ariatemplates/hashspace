<script>
/*
 * Copyright 2012 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Taken from Aria Templates: https://github.com/ariatemplates/ariatemplates/blob/master/test/aria/touch/gestures/Swipe.js
 */

require("hsp/gestures/swipe").register();
var fireEvent=require("hsp/utils/eventgenerator").fireEvent,
    touchEventMap = require("hsp/gestures/touchEvent").touchEventMap;
</script>

<template test1(ctl)>
    <div title="test1" onswipe="{ctl.handleEvent($event)}" onswipestart="{ctl.handleEvent($event)}" onswipemove="{ctl.handleEvent($event)}" onswipecancel="{ctl.handleEvent($event)}">
        Hello!
    </div>
</template>

<script>
describe("Swipe gesture", function () {

    function validate(expected, result) {
        expect(expected.length).to.equal(result.length);
        for (var i = 0; i < expected.length; i ++) {
            expect(expected[i]).to.equal(result[i]);
        }
    }

    it("tests a cancel swipe: touchstart, touchmove with 2 fingers", function () {
        var expected =  ["swipestart", "swipecancel"];
        var result = [];
        var ctl = {
            handleEvent : function (evt) {
                result.push(evt.type);
            }
        };
        var n = test1(ctl);
        fireEvent(touchEventMap.touchstart, n.node.firstChild, {
            isPrimary : true,
            touches : [{
                        clientX : 0,
                        clientY : 0
                    }],
            changedTouches : [{
                        clientX : 0,
                        clientY : 0
                    }]
        });
        fireEvent(touchEventMap.touchmove, n.node.firstChild, {
            isPrimary : false,
            touches : [{
                        clientX : 0,
                        clientY : 0
                    }, {
                        clientX : 5,
                        clientY : 5
                    }],
            changedTouches : [{
                        clientX : 5,
                        clientY : 5
                    }]
        });
        validate(expected, result);
        n.$dispose();
    });

    it("tests a cancelled because not in straight line swipe: touchstart, touchmove * 4, touchend", function () {
        var expected =  ["swipestart", "swipemove", "swipemove", "swipemove", "swipecancel"];
        var result = [];
        var ctl = {
            handleEvent : function (evt) {
                result.push(evt.type);
            }
        };
        var n = test1(ctl);
        fireEvent(touchEventMap.touchstart, n.node.firstChild, {
            clientX : 0,
            clientY : 0
        });
        fireEvent(touchEventMap.touchmove, n.node.firstChild, {
            clientX : 10,
            clientY : 5
        });
        fireEvent(touchEventMap.touchmove, n.node.firstChild, {
            clientX : 20,
            clientY : 10
        });
        fireEvent(touchEventMap.touchmove, n.node.firstChild, {
            clientX : 30,
            clientY : 15
        });
        fireEvent(touchEventMap.touchmove, n.node.firstChild, {
            clientX : 40,
            clientY : 21
        });
        fireEvent(touchEventMap.touchend, n.node.firstChild, {
            clientX : 40,
            clientY : 21
        });
        validate(expected, result);
        n.$dispose();
    });

    it("tests a valid swipe: touchstart, touchmove * 3, touchend", function () {
        var expected =  ["swipestart", "swipemove", "swipemove", "swipemove", "swipe"];
        var result = [];
        var ctl = {
            handleEvent : function (evt) {
                result.push(evt.type);
            }
        };
        var n = test1(ctl);
        fireEvent(touchEventMap.touchstart, n.node.firstChild, {
            clientX : 0,
            clientY : 0
        });
        fireEvent(touchEventMap.touchmove, n.node.firstChild, {
            clientX : 5,
            clientY : 0
        });
        fireEvent(touchEventMap.touchmove, n.node.firstChild, {
            clientX : 10,
            clientY : 0
        });
        fireEvent(touchEventMap.touchmove, n.node.firstChild, {
            clientX : 15,
            clientY : 0
        });
        fireEvent(touchEventMap.touchend, n.node.firstChild, {
            clientX : 15,
            clientY : 5
        });
        validate(expected, result);
        n.$dispose();
    });

});
</script>