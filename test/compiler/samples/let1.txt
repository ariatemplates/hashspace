##### Template:
# template test(value)
  {let x=value.nbr+3}
# /template

##### Parsed Tree
[
  {
    "type": "template", "name": "test", "args": ["value"], "closed": true,
    "content": [
      {
        "type": "let",
        "line": 2,
        "column": 3,
        "assignments": [
          {
            "identifier": "x",
            "value": {
              "type": "BinaryExpression",
              "operator": "+",
              "left": {
                "type": "PropertyAccess",
                "base": {
                  "type": "Variable",
                  "name": "value",
                  "code": "value"
                },
                "name": "nbr",
                "code": "value.nbr"
              },
              "right": {
                "type": "expression",
                "category": "number",
                "value": 3,
                "code": "3"
              },
              "category": "jsexpression",
              "expType": "BinaryExpression",
              "line": 2,
              "column": 10
            }
          }
        ]
      }
    ]
  }
]

##### Syntax Tree
[
  {
    "type": "template", "name": "test", "args": ["value"],
    "content": [
      {
        "type": "let",
        "assignments": [
          {
            "identifier": "x",
            "value": {
              "type": "expression",
              "category": "jsexpression",
              "objectrefs": [
                {
                  "type": "expression",
                  "category": "objectref",
                  "path": [
                    "value",
                    "nbr"
                  ]
                }
              ],
              "code": "(a0 + 3)",
              "line": 2,
              "column": 10
            }
          }
        ]
      }
    ]
  }
]
    
##### Template Code
test=[
  n.let({
    e1:[6,function(a0) {return (a0 + 3);},2],
    e2:[1,2,"value","nbr"]
  },['x',1])
]
