##### Template:
<template id="test" args="things">
  Foreach test:
  {foreach (thing in things)} - {thing} - {/foreach}
</template>

##### Parsed Tree

[
  {
    "type": "template",
    "name": "test",
    "args": ["things"],
    "content": [
      {"type": "text","value": "Foreach test: "},
      {"type": "foreach","item":"thing","key":"thing_key",
        "colref": {
          "category": "jsexptext",
          "value": "things",
          "line": 3,
          "column": 22
        }
      },
      {"type": "text","value": " - "},
      {"type": "expression", "category": "jsexptext", value:"thing"},
      {"type": "text","value": " - "},
      {"type": "endforeach"}
    ]
  }
]

##### Syntax Tree

[
  {
    "type": "template",
    "name": "test",
    "args": ["things"],
    "content": [
      {"type": "text","value": "Foreach test: "},
        {"type": "foreach","item":"thing","key":"thing_key",
        "collection": {
            "category": "jsexptext",
            "value": "things",
            "line": 3,
            "column": 22
        },
        content:[
          {"type": "textblock", "content": [
            {"type": "text","value": " - "},
            {"type": "expression", "category": "jsexptext", value:"thing"},
            {"type": "text","value": " - "}
          ]}
        ]
      }
    ]
  }
]

##### Template Code
test=[__s,
  n.$text(0,["Foreach test:  "]),
  n.$foreach({e1: [9, "things"]}, "thing_key", "thing", 0 , 1, [
    n.$text({e1: [9, "thing"]}, [" - ", 1, " - "])
  ])
]
