<script>
var ht=require("hsp/utils/hashtester"), 
    log=require("hsp/rt/log"),
    $set=require("hsp/$set");
</script>

<template id="testContent" args="data">
    <div class="foo1 foo2">
        <span class="sometext" title="Hello World!">Here is some text</span>
        <span class="count" onclick="{increaseCount(data,1)}" ondblclick="{increaseCount(data,5)}">{data.count}</span>
    </div>
    <ul class="bar">
        <li>item 1</li>
        <li class="foo2 bar2">item 2</li>
        <li>item 3</li>
    </ul>
</template>

<script>
function increaseCount(d,incr) {
    $set(d,"count",d.count+incr);
}

var COUNT=".count";
var ITEMS=".bar li";

describe("HashTester", function () {

    it("validates container creation", function() {
        var h=ht.newTestContext();

        expect(h.container).not.to.equal(null);
        expect(h.container.nodeType).to.equal(1);
        
        h.$dispose();
    });

    it("validates element selector", function() {
        var h=ht.newTestContext();
        testContent({count:0}).render(h.container);

        // invalid selector
        var x=h(".blah");
        expect(x.length).to.equal(0);

        // valid selector
        var sometext=h(".foo1 .sometext");
        expect(sometext.length).to.equal(1);
        expect(sometext.text()).to.equal("Here is some text");

        // list of items
        var items=h(".bar li");
        expect(items.length).to.equal(3);
        expect(items.item(1).text()).to.equal('item 2');

        h.$dispose();
    });

    it("validates selection find()", function() {
        var h=ht.newTestContext();
        testContent({count:0}).render(h.container);

        // list of items
        var items=h(".bar").find("li");
        expect(items.length).to.equal(3);
        expect(items.item(2).text()).to.equal('item 3');

        h.$dispose();
    });

    it("validates element click", function() {
        var h=ht.newTestContext();
        testContent({count:0}).render(h.container);

        expect(h(COUNT).text()).to.equal("0");
        h(COUNT).click();

        expect(h(COUNT).text()).to.equal("1");
        h.$dispose();
    });

    it("validates element dblclick", function() {
        var h=ht.newTestContext();
        var n=testContent({count:0}).render(h.container);

        expect(h(COUNT).text()).to.equal("0");
        h(COUNT).dblclick();

        expect(h(COUNT).text()).to.equal("5");
        h.$dispose();
    });

    it("validates hasClass() to know if an element is assigned a given css class", function() {
        var h=ht.newTestContext();
        var n=testContent({count:0}).render(h.container);

        var list=h(ITEMS);
        expect(list.item(0).hasClass("foo2")).to.equal(false);
        expect(list.item(1).hasClass("foo2")).to.equal(true);

        h.$dispose();
    });

    it("validates attribute() retrieval", function() {
        var h=ht.newTestContext();
        var n=testContent({count:0}).render(h.container);

        expect(h('.foo1 > .sometext').attribute('title')).to.equal('Hello World!');

        h.$dispose();
    });

    it("validates log capture", function() {
        var initialNbr=log.getNbrOfLoggers();

        var h=ht.newTestContext();
        expect(h.logs().length).to.equal(0);
        expect(log.getNbrOfLoggers()).to.equal(initialNbr+1);

        var n=testContent({count:0}).render(h.container);

        log.error("Sample log");
        expect(h.logs().length).to.equal(1);
        expect(h.logs(0).type).to.equal("error");
        expect(h.logs(0).message).to.equal("Sample log");

        log.warning("Second log");
        expect(h.logs().length).to.equal(2);
        expect(h.logs(1).type).to.equal("warning");
        expect(h.logs(1).message).to.equal("Second log");

        h.logs.clear();
        expect(h.logs().length).to.equal(0);

        h.$dispose();
        expect(log.getNbrOfLoggers()).to.equal(initialNbr);
    });
});
</script>