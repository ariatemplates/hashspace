<script>
/*
 * Copyright 2014 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var klass=require("hsp/klass"),
    ht=require("hsp/utils/hashtester");


var msg='', refreshCount=0;
var TestCtrl1=klass({
  $attributes:{
    "value":{type:"string",binding:"2-way"}
  },
  $init:function() {

  },
  $onValueChange:function(newValue,oldValue) {
    var div=this.$getElement(1);
    if (div) {
      div.title=this.value;
    }
  },
  $refresh:function() {
    refreshCount++;
    var div=this.$getElement(1);
    if (div) {
      msg=div.title;
    }
  }
});
</script>

<template test1 using c:TestCtrl1>
  Hello
  <div class="foo">
    Blah
  </div>
  <div class="bar" title="hello"></div>
</template>

<template test2>
  <div class="bar" title="foo1"></div>
  <#test1/>
  <div class="bar" title="foo2"></div>
</template>

<template test3(d)>
  {if d.ok}
    <#test1 value="{d.input}"/>
  {/if}
</template>

<script>
describe("External component integration", function () {
    beforeEach(function() {
        msg='';
        refreshCount=0;
    });
  
    it("validates $getElement() method through direct template call", function() {
        var h=ht.newTestContext(), d={value:"hello"};
        
        test1(d).render(h.container);
        expect(msg).to.equal("hello");
        expect(refreshCount).to.equal(1);

        h.$dispose();
    });

    it("validates $getElement() method through component call", function() {
        var h=ht.newTestContext();
        
        test2().render(h.container);
        expect(msg).to.equal("hello");
        expect(refreshCount).to.equal(1);

        h.$dispose();
    });

    it("validates $refresh() call when attribute changes", function() {
        var h=ht.newTestContext(), dm={ok:true,input:"foo"};
        
        test3(dm).render(h.container);

        h.$set(dm,"input","bar");
        expect(refreshCount).to.equal(2);
        expect(h('.bar').attribute('title')).to.equal("bar");

        h.$dispose();
    });

    it("validates $refresh() call in {if} statements", function() {
        var h=ht.newTestContext(), dm={ok:false,input:"foo"};
        
        test3(dm).render(h.container);

        expect(refreshCount).to.equal(0);

        h.$set(dm,"ok",true);
        expect(refreshCount).to.equal(1);

        h.$set(dm,"ok",false);
        expect(refreshCount).to.equal(1);

        h.$set(dm,"ok",true);
        expect(refreshCount).to.equal(2);     

        h.$dispose();
    });

});
</script>
