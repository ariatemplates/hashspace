
/*
 * Copyright 2014 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var klass=require("hsp/klass"),
    ht=require("hsp/utils/hashtester");


var msg='', refreshCount=0;
var TestCtrl1=klass({
  attributes:{
    "value":{type:"string",binding:"2-way"}
  },
  onValueChange:function(newValue,oldValue) {
    var div=this.$getElement(1);
    if (div) {
      div.title=this.value;
    }
  },
  $refresh:function() {
    refreshCount++;
    var div=this.$getElement(1);
    if (div) {
      msg=div.title;
    }
  }
});

{template test1 using c:TestCtrl1}
  Hello
  <div class="foo">
    Blah
  </div>
  <div class="bar" title="hello"></div>
{/template}

{template test2}
  <div class="bar" title="foo1"></div>
  <#test1/>
  <div class="bar" title="foo2"></div>
{/template}

{template test3(d)}
  {if d.ok}
    <#test1 value="{d.input}"/>
  {/if}
{/template}

var QSelectorCtrl=klass({
  attributes:{
    "qselector":{type:"string"}
  },
  $refresh:function() {
    var elt=this.$getElement(this.qselector);
    if (elt) {
      elt.title="$refresh";
    }
  }
});

{template qsel using c:QSelectorCtrl}
  <div class="divA">
    <div class="divA1 bar" title="A1">A1</div>
    <div class="divA2">
      <div class="divA21" id="blah">A21</div>
    </div>
  </div>
  <div class="divB">
    <div class="divB1">B1</div>
    <div class="divB2">
      <input id="foo" type="text"/>
    </div>
  </div>
{/template}

{template test4(selector)}
  <div>
    <#qsel qselector="{selector}"/>
  </div>
{/template}

describe("External component integration", function () {
    var h;

    beforeEach(function () {
        h=ht.newTestContext();
        msg='';
        refreshCount=0;
    });

    afterEach(function () {
        h.$dispose();
    });

  
    it("validates $getElement() method through direct template call", function() {
        var d={value:"hello"};

        test1(d).render(h.container);
        expect(msg).to.equal("hello");
        expect(refreshCount).to.equal(1);
    });

    it("validates $getElement() method through component call", function() {
        test2().render(h.container);
        expect(msg).to.equal("hello");
        expect(refreshCount).to.equal(1);
    });

    it("validates $getElement() with selector 1", function() {
        test4(".divA > .divA1").render(h.container);
        expect(h(".divA > .divA1").attribute("title")).to.equal("$refresh");
    });

    it("validates $getElement() with selector 2", function() {
        test4(".divB1").render(h.container);
        expect(h(".divB1").attribute("title")).to.equal("$refresh");
    });

    it("validates $getElement() with selector 3", function() {
        test4("#foo").render(h.container);
        expect(h("#foo").attribute("title")).to.equal("$refresh");
    });

    it("validates $getElement() with selector 4", function() {
        test4(".divB").render(h.container);
        expect(h(".divB").attribute("title")).to.equal("$refresh");
    });

    it("validates $getElement() with selector 5", function() {
        test4("input[type=text]").render(h.container);
        expect(h("input[type=text]").attribute("title")).to.equal("$refresh");
    });

    it("validates $getElement() with selector 6", function() {
        test4(".bar").render(h.container);
        expect(h(".bar").attribute("title")).to.equal("$refresh");
    });

    it("validates $getElement() with selector 7", function() {
        test4("#blah").render(h.container);
        expect(h("#blah").attribute("title")).to.equal("$refresh");
    });
    
    it("validates $refresh() call when attribute changes", function() {
        var dm={ok:true,input:"foo"};
        
        test3(dm).render(h.container);

        h.$set(dm,"input","bar");
        expect(refreshCount).to.equal(2);
        expect(h('.bar').attribute('title')).to.equal("bar");
    });

    it("validates $refresh() call in {if} statements", function() {
        var dm={ok:false,input:"foo"};
        
        test3(dm).render(h.container);

        expect(refreshCount).to.equal(0);

        h.$set(dm,"ok",true);
        expect(refreshCount).to.equal(1);

        h.$set(dm,"ok",false);
        expect(refreshCount).to.equal(1);

        h.$set(dm,"ok",true);
        expect(refreshCount).to.equal(2);
    });

});
