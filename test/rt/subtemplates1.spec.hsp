<script>
/*
 * Copyright 2012 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var hsp=require("hsp/rt"),
    fireEvent=require("hsp/utils/eventgenerator").fireEvent,
    json=require("hsp/json");
</script>

<template id="content" args="label, value">
    {:label}: {value}
</template>

<template id="test1" args="person">
    Before
    <#content label="First Name" value="{person.firstName}"/>
    After
</template>

<template id="nameDetails" args="person">
    <#content value="{person.lastName}" label="Last Name"/>
    {if (person.firstName)}
        , 
        <#content label="First Name" value="{person.firstName}"/>
    {/if}
</template>

<template id="test2" args="p">
    <#nameDetails person="{p}"/>
</template>

<template id="test3" args="person, label">
    // inserted template also has a label argument
    {label}
    <#content label="{person.firstName}" value="{:person.lastName}"/>
</template>

<script>
function concat(a,b) {
    return a+": "+b;
}
</script>

<template id="test4" args="person">
    {concat(person.firstName, person.lastName)}
</template>

<template id="field" args="label,value">
    {label}
    <input type="text" value="{value}"/>
</template>

<template id="test5" args="d">
    <#field label="Enter some text" value="{d.text}"/>
</template>

<template id="field2" args="attributes">
    Enter some text: 
    <input type="text" value="{attributes.value}"/>
</template>

<template id="test6" args="d">
    <#field2 attributes="{d.attributes}"/>
</template>

<template id="field3" args="attributes">
    Enter some text: 
    <input type="text" value="{attributes.myvalue.value}"/>
</template>

<template id="test7" args="d">
    <#field3 attributes="{{myvalue: d}}"/>
</template>

<script>
describe("Sub-template insertion", function () {
    it("tests a simple insertion", function () {
        var dm = {
            firstName : "Omer",
            lastName : "Simpson"
        };
        var n = test1(dm);
        var tn = n.childNodes[1].childNodes[0];

        expect(n.childNodes.length).to.equal(3);
        expect(n.node.childNodes.length).to.equal(5); // 3 + 2 comments
        expect(n.node.childNodes[2].nodeValue).to.equal("First Name: Omer");
        expect(tn.node.nodeValue).to.equal("First Name: Omer");

        n.$dispose();
        expect(tn.node).to.equal(null);
    });

    it("tests nested insertion with multiple template instances and data-model updates", function () {
        var dm = {
            firstName : "Omer",
            lastName : "Simpson"
        };
        var n = test2(dm);

        expect(n.childNodes.length).to.equal(1);
        expect(n.node.childNodes.length).to.equal(11); // 5 + 6 comments
        expect(n.node.childNodes[2].nodeValue).to.equal("Last Name: Simpson");
        expect(n.node.childNodes[7].nodeValue).to.equal("First Name: Omer");

        // update the data model
        json.set(dm, "firstName", "Marge");
        hsp.refresh();
        expect(n.node.childNodes[7].nodeValue).to.equal("First Name: Marge");

        json.set(dm, "firstName", null);
        hsp.refresh();
        expect(n.node.childNodes.length).to.equal(7); // 3 + 4 comments

        json.set(dm, "firstName", "Mickey");
        json.set(dm, "lastName", "Mouse");
        hsp.refresh();
        expect(n.node.childNodes.length).to.equal(11);
        expect(n.node.childNodes[2].nodeValue).to.equal("Last Name: Mouse");
        expect(n.node.childNodes[7].nodeValue).to.equal("First Name: Mickey");

        var n2 = n.childNodes[0].childNodes[1].childNodes[1].childNodes[0];
        expect(n2.node.nodeValue).to.equal("First Name: Mickey");

        n.$dispose();
        expect(n2.node).to.equal(null);
    });

    it("tests that nested template scope is isolated from the parent's template scope", function () {
        var dm = {
            firstName : "Omer",
            lastName : "Simpson"
        };
        var n = test3(dm, "Always look on the bright side of life");

        expect(n.node.childNodes.length).to.equal(4); // 2 + 2 comments
        expect(n.node.childNodes[0].nodeValue).to.equal(" Always look on the bright side of life ");
        expect(n.node.childNodes[2].nodeValue).to.equal("Omer: Simpson");

        n.$dispose();
    });

    it("tests insert with a JS function", function () {
        var dm = {
            firstName : "Omer",
            lastName : "Simpson"
        };
        var n = test4(dm);

        expect(n.node.childNodes.length).to.equal(1);
        expect(n.node.childNodes[0].nodeValue).to.equal("Omer: Simpson");
        n.$dispose();
    });

    it("tests insert no code injection with a JS function", function () {
        var dm = {
            firstName : "<b>Omer</b>",
            lastName : "Simpson"
        };
        var n = test4(dm);

        // <b> is not interpreted as a tag, but as &lt;b&gt;
        expect(n.node.childNodes.length).to.equal(1);
        expect(n.node.childNodes[0].nodeValue).to.equal("<b>Omer</b>: Simpson");
        n.$dispose();
    });

    it("tests template argument update", function () {
        var dm = {
            firstName : "Omer",
            lastName : "Simpson"
        };
        var n = test3(dm, "answer is?");

        expect(n.node.childNodes[0].nodeValue).to.equal(" answer is? ");

        n.updateArgument(1, "answer is 42");
        hsp.refresh();

        expect(n.node.childNodes[0].nodeValue).to.equal(" answer is 42 ");

        n.$dispose();
    });

    it("tests input data change from sub- to parent- template", function () {
        var dm = {
            text : "some text"
        };
        var n = test5(dm);

        var input = n.node.childNodes[2];
        expect(input.value).to.equal("some text");

        input.value = "foo";
        fireEvent("keyup",input); // triggers change propagation

        // change must have been propagated to parent scope
        expect(dm.text).to.equal("foo");

        // check that the scope observer is properly disposed
        expect(n.childNodes[0]._scopeChgeCb).not.to.equal(null);
        n.$dispose();
        expect(n.childNodes).to.equal(null);
    });

    it("tests input data change from sub- to parent- template with object argument", function () {
        var dm = {
            attributes : {
                value : "some text"
            }
        };
        var n = test6(dm);

        var input = n.node.childNodes[2];
        expect(input.value).to.equal("some text");

        input.value = "bar";
        fireEvent("keyup",input);

        // change must have been propagated to parent scope
        expect(dm.attributes.value).to.equal("bar");

        n.$dispose();
    });
    
    it("tests scope root data change", function () {
        var dm = {
            attributes : {
                value : "some text"
            }
        };
        var n = test6(dm);

        var input = n.node.childNodes[2];
        expect(input.value).to.equal("some text");

        // change the whole attributes object, which is a root
        // element in the scope of the field2 template
        json.set(dm, "attributes", {
            value : "new text"
        });
        hsp.refresh();

        expect(input.value).to.equal("new text");
        n.$dispose();
    });

    it("tests input data change with objectliteral argument", function () {
        var dm = {
            value : "some text"
        };
        var n = test7(dm);

        var input = n.node.childNodes[2];
        expect(input.value).to.equal("some text");

        // change the whole attributes object, which is a root
        // element in the scope of the field2 template
        json.set(dm, "value", "new text");
        hsp.refresh();
        expect(input.value).to.equal("new text");

        input.value = "bar";
        fireEvent("keyup",input);
        expect(dm.value).to.equal("bar");

        n.$dispose();
    });
});
</script>
