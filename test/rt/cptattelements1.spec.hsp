<script>
/*
 * Copyright 2013 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var klass=require("hsp/klass"),
    ht=require("hsp/utils/hashtester");

// sample controller
PanelController = klass({
  $attributes: {
    "expanded":{type:"boolean",binding:"2-way"},
    "head":{type:"template"},
    "body":{type:"template", defaultContent:true}
  }
});

// sample panel template
</script>

<template panel using c:PanelController>
  <div class="panel">
    {if c.head}
      <div class="head">
        <#c.head/>
      </div>
    {/if}
    <div class="body">
      <#c.body/>
    </div>
    {if c.footer}
      <div class="footer">TODO</div>
    {/if}
  </div>
</template>

<template test1(m)>
  Sample panel:
  <#panel>
    <@body>
      {m.text}!
    </@body>
  </#panel>
</template>

<template test2()>
  Sample panel:
  <#panel body="Hello World!"/>
</template>

<template test3(m)>
  Sample panel:
  <#panel body="{m.text}!"/>
</template>

<template test4(m)>
  Sample panel:
  <#panel>{m.text}!</#panel>
</template>

<template test5(m)>
  Sample panel:
  <#m.panel><@body>{m.text}!</@body></#m.panel>
</template>

<template test6(m)>
  Sample panel:
  <#m.panel>{m.text}!!!</#m.panel>
</template>

<template test7(m)>
  Sample panel:
  <#m.panel>
  {if true}{m.text}!{/if} <hr/> {m.text} <a>Update model</a>
  </#m.panel>
</template>

<template test8(m)>
  Sample panel:
  <#m.panel>
    {if true}{m.text}!{/if}
    <@body>foo <a>Update model</a> </@body>
  </#m.panel>
</template>

<template panel2 using c:PanelController>
  <div class="panel">
    <div class="body">
      Body content: <#c.body/>
    </div>
  </div>
</template>

<script>
var TestCtl=klass({
      $attributes:{
        "value":{type:"string",binding:"1-way"}
    }
})
</script>

<template item using c:TestCtl>
    Value: {c.value}
</template>

<template test7(m)>
  <div class="content">
    <#item value="{m.prop.value}"/>
  </div>
</template>

<script>
var HEAD=".panel .head";
var BODY=".panel .body";

describe("Component attribute elements (1)", function () {

  it("tests template attribute passed as sub-element", function() {
    var h=ht.newTestContext();
    var m={text:"Hello World"}
    test1(m).render(h.container);
    var head=h(HEAD);
    var body=h(BODY);
    expect(head.length).to.equal(0);
    expect(body.length).to.equal(1);
    expect(body.text()).to.equal("Hello World!");

    // dynamic property change
    h.$set(m,"text","Hello folks");

    expect(body.text()).to.equal("Hello folks!");

    h.$dispose();
  });

  it("tests template attribute passed as static text attribute", function() {
    var h=ht.newTestContext();
    test2().render(h.container);

    expect(h(HEAD).length).to.equal(0);
    expect(h(BODY).length).to.equal(1);
    expect(h(BODY).text()).to.equal("Hello World!");

    h.$dispose();
  });

  it("tests template attribute passed as dynamic text attribute", function() {
    var h=ht.newTestContext();
    var m={text:"Hello World"}
    test3(m).render(h.container);

    expect(h(HEAD).length).to.equal(0);
    expect(h(BODY).length).to.equal(1);
    expect(h(BODY).text()).to.equal("Hello World!");

    // dynamic property change
    h.$set(m,"text","Hello folks");

    expect(h(BODY).text()).to.equal("Hello folks!");

    h.$dispose();
  });

  it("tests default template attribute passed as node content", function() {
    var h=ht.newTestContext();
    var m={text:"Hello World"}
    test4(m).render(h.container);

    expect(h(BODY).length).to.equal(1);
    expect(h(BODY).text()).to.equal("Hello World!");

    // dynamic property change
    h.$set(m,"text","Hello folks");

    expect(h(BODY).text()).to.equal("Hello folks!");

    h.$dispose();
  });

  it("tests dynamic component path", function() {
    var h=ht.newTestContext();
    var m={panel:panel,text:"Hello World"}
    test5(m).render(h.container);

    expect(h.logs().length).to.equal(0);
    expect(h(BODY).length).to.equal(1);
    expect(h(BODY).text()).to.equal("Hello World!");

    // dynamic property change
    h.$set(m,"panel",panel2);

    expect(h.logs().length).to.equal(0);
    expect(h(BODY).length).to.equal(1);
    expect(h(BODY).text()).to.equal("Body content: Hello World!");

    // text change
    h.$set(m,"text","Hashspace rocks");

    expect(h.logs().length).to.equal(0);
    expect(h(BODY).length).to.equal(1);
    expect(h(BODY).text()).to.equal("Body content: Hashspace rocks!");

    // dynamic property change - again
    h.$set(m,"panel",panel);

    expect(h.logs().length).to.equal(0);
    expect(h(BODY).length).to.equal(1);
    expect(h(BODY).text()).to.equal("Hashspace rocks!");

    h.$dispose();
  });

  it("tests dynamic component path - with default template", function() {
    var h=ht.newTestContext();
    var m={panel:panel,text:"Hello World"}
    test6(m).render(h.container);

    expect(h.logs().length).to.equal(0);
    expect(h(BODY).length).to.equal(1);
    expect(h(BODY).text()).to.equal("Hello World!!!");

    // dynamic property change
    h.$set(m,"panel",panel2);

    expect(h.logs().length).to.equal(0);
    expect(h(BODY).length).to.equal(1);
    expect(h(BODY).text()).to.equal("Body content: Hello World!!!");

    // text change
    h.$set(m,"text","Hashspace World");

    expect(h.logs().length).to.equal(0);
    expect(h(BODY).length).to.equal(1);
    expect(h(BODY).text()).to.equal("Body content: Hashspace World!!!");

    // dynamic property change - again
    h.$set(m,"panel",panel);

    expect(h.logs().length).to.equal(0);
    expect(h(BODY).length).to.equal(1);
    expect(h(BODY).text()).to.equal("Hashspace World!!!");

    h.$dispose();
  });

  it("validates change propagation with long expression paths", function() {
    var h=ht.newTestContext();
    var count=0, model={prop:{value:"hello"}};

    test7(model).render(h.container);
    expect(h(".content").text()).to.equal("Value: hello");

    // change data
    count++;
    h.$set(model.prop,"value","hello"+count);
    expect(h(".content").text()).to.equal("Value: hello1");

    // change path
    h.$set(model,"prop",{value:"foo"});
    expect(h(".content").text()).to.equal("Value: foo");

    // change data
    count++;
    h.$set(model.prop,"value","hello"+count);
    expect(h(".content").text()).to.equal("Value: hello2");

    h.$dispose();
  });

  it("tests mixed content - with default template", function() {
    var h=ht.newTestContext();
    var m={panel:panel,text:"Hello World"}
    test7(m).render(h.container);

    expect(h.logs().length).to.equal(0);

    h.$dispose();
  });

  it("tests invalid component content", function() {
    var h=ht.newTestContext();
    var m={panel:panel,text:"Hello World"}
    test8(m).render(h.container);

    expect(h.logs().length).to.equal(2);
    expect(h.logs()[0].message).to.equal("[Component: #m.panel] Component content cannot mix attribute elements with content elements");
    expect(h.logs()[1].message).to.equal("[Component: #c.body] Invalid component reference");

    h.logs.clear();
    h.$dispose();
  });

  // TODO
  // properly dispose generated properties
  // test errors when sub-template attribute are improperly mixed
  // test that template attribute can be generated dynamically
  // test that template attriubte can be created/deleted dynamically

});
</script>
