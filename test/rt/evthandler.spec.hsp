<script>
/*
 * Copyright 2012 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var ht=require("hsp/utils/hashtester"),
    fireEvent=require("hsp/utils/eventgenerator").fireEvent;
</script>

<template test1(person,ctl)>
    <div title="test1" onclick="{ctl.handleClick()}">
        Hello {person.name}!
    </div>
</template>

<template test2(label,names,ctl)>
    {foreach key,name in names}
        <span onclick="{ctl.handleClick(name,key,'literal arg',$event)}">
            {:label} {key}: {:name}
        </span>
    {/foreach}
</template>

<template test3(person)>
    <div title="test3" onclick="{doClick('blah',$event)}">
        Hello {person.name}!
    </div>
</template>

<template test4()>
    <img onclick="this.cbatt=123;return false;"/>
</template>

<script>
var doClickCount = 0, doClickEvtType = "", doClickStrArg = "";
function doClick (str, evt) {
    doClickCount++;
    doClickEvtType = evt.type;
    doClickStrArg = str;
}

describe("Event Handlers", function () {
    function test2SpanNode (n, idx) {
        return n.node.childNodes[1 + idx * 3 + 1];
    }

    function test2SpanValue (n, idx) {
        // return the value of the text node in the span
        return test2SpanNode(n, idx).childNodes[0].nodeValue;
    }

    it("tests a simple event handler", function () {
        var dm = {
            name : "Omer"
        };
        var count = 0;
        var lastArg;
        var ctl = {
            handleClick : function (arg) {
                count++;
                lastArg = arg;
            }
        };
        var n = test1(dm, ctl);
        expect(n.node.firstChild.firstChild.nodeValue).to.equal("Hello Omer! ");
        expect(count).to.equal(0);

        fireEvent("click",n.node.firstChild);
        expect(count).to.equal(1);
        expect(lastArg).to.equal(undefined);

        n.$dispose();
    });

    it("tests handlers on loop elements with contectual args", function () {
        var count = 0;
        var lastName = "";
        var lastIdx = -1;
        var lastStrArg = "";
        var lastEvtType = null;

        var ctl = {
            handleClick : function (name, idx, strArg, evt) {
                count++;
                lastName = name;
                lastIdx = idx;
                lastStrArg = strArg;
                lastEvtType = evt.type;
            }
        };
        var ds = ["Omer", "Marge", "Bart", "Lisa", "Maggie"];
        var n = test2("index", ds, ctl);

        expect(test2SpanValue(n, 1)).to.equal("index 1: Marge ");
        expect(test2SpanValue(n, 3)).to.equal("index 3: Lisa ");
        expect(count).to.equal(0);

        fireEvent("click",test2SpanNode(n, 1)); 

        expect(count).to.equal(1);
        expect(lastName).to.equal("Marge");
        expect(lastIdx).to.equal(1);
        expect(lastStrArg).to.equal("literal arg");
        expect(lastEvtType).to.equal("click");

        fireEvent("click",test2SpanNode(n, 3)); 

        expect(count).to.equal(2);
        expect(lastName).to.equal("Lisa");
        expect(lastIdx).to.equal(3);
        expect(lastStrArg).to.equal("literal arg");
        expect(lastEvtType).to.equal("click");

        n.$dispose();
    });

    it("tests global scope handler function", function () {
        var dm = {
            name : "Omer"
        };
        var n = test3(dm);

        expect(n.node.firstChild.firstChild.nodeValue).to.equal("Hello Omer! ");
        expect(doClickCount).to.equal(0);

        fireEvent("click",n.node.firstChild); 
        expect(doClickCount).to.equal(1);
        expect(doClickStrArg).to.equal("blah");

        n.$dispose();
    });

    it("tests standard html event handlers", function () {
        var h=ht.newTestContext();
        test4().render(h.container);

        var img = h('img');
        expect(img.$selection[0].cbatt).to.equal(undefined);
        img.click();

        // TODO fix next line in IE8
        expect(img.$selection[0].cbatt).to.equal(123);
        h.$dispose();
    });

});
</script>
