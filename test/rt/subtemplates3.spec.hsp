<script>
/*
 * Copyright 2014 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var ht=require("hsp/utils/hashtester");

var count = 0;
var addItem = function (items) {
   count++;
   items.push({name:"item"+count, edit:true});
};

var removeItem = function (items, index) {
   items.splice(index, 1);
};
</script>

<template id="displayItem" args="itms, idx">
    <li onclick="{removeItem(itms, 0)}">Remove #{idx}</li>
</template>

<template id="list" args="items">
    <ul>
        {foreach index,curItem in items}
            {if true}
                // if node is necessary to create a sub-scope
                <#displayItem itms="{items}" idx="{index}"/>
            {/if}
        {/foreach}
    </ul>
    <a onclick="{addItem(items)}">Add item</a>
</template>

<template id="item" args="value">
    Value: {value}
</template>

<template id="test1" args="m">
    <div class="content">
        <#item value="{m.prop.value}"/>
    </div>
</template>

<template id="innerTemplate" args="data">
    {if data.checked}[x]{else}[ ]{/if} Checked
</template>

<template id="intermediateTemplate" args="data">
  <#innerTemplate data="{data}"/>
</template> 

<template id="test2" args="data">
  <div class="content">
    <#data.template data="{data}"/>
  </div>
</template>

<script>
describe("Sub- and parent- template scope interactions", function () {
    it("validates property bubbling from sub-template to parent", function() {
        var h=ht.newTestContext();
        var items = [];
        addItem(items);
        addItem(items);
        addItem(items);

        list(items).render(h.container);

        expect(h("li").length).to.equal(3);
        expect(h("li").item(0).text()).to.equal("Remove #0");
        
        h("li").item(0).click();
        expect(h("li").length).to.equal(2);
        expect(h("li").item(0).text()).to.equal("Remove #0");

        h("li").item(0).click();
        expect(h("li").length).to.equal(1);
        // the following assertion will fail if property changes are not properly bubbled
        expect(h("li").item(0).text()).to.equal("Remove #0");
        
        h.$dispose();
    });

    it("validates change propagation with long expression paths", function() {
        var h=ht.newTestContext();
        var count=0, model={prop:{value:"hello"}};
        
        test1(model).render(h.container);
        expect(h(".content").text()).to.equal("Value: hello");

        // change data
        count++;
        h.$set(model.prop,"value","hello"+count);
        expect(h(".content").text()).to.equal("Value: hello1");

        // change path
        h.$set(model,"prop",{value:"foo"});
        expect(h(".content").text()).to.equal("Value: foo");

        // change data
        count++;
        h.$set(model.prop,"value","hello"+count);
        expect(h(".content").text()).to.equal("Value: hello2");
        
        h.$dispose();
    });

    it("validates root node change propagation after render", function() {
        var h=ht.newTestContext(), model={template:intermediateTemplate, checked: true};

        var r=test2(model);
        r.render(h.container);
        expect(h(".content").text()).to.equal("[x] Checked");

        // uncheck
        h.$set(model,"checked",false);
        expect(h(".content").text()).to.equal("[ ] Checked");

        h.$dispose();
    });
});
</script>
