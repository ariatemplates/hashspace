<script>
/*
 * Copyright 2013 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var klass=require("hsp/klass"),
    ht=require("hsp/utils/hashtester");

var constructor_counter = 0;
var dispose_counter = 0;

var LifeCycleController = klass({
  $constructor: function() {
    constructor_counter++;
  },
  $dispose: function() {
    dispose_counter++;
  }
});
</script>

<template lifecycle1 using ctrl:LifeCycleController>
  <div class="content">I am component 1</div>
</template>

<template lifecycle2 using ctrl:LifeCycleController>
  <div class="content">I am component 2</div>
</template>

<template wrapper(data)>
  {if data.visible}
    <#lifecycle1 />
  {/if}
</template>

<template dynamicWrapper(data)>
  <#data.cpt />
</template>

<script>
var data = {
  visible: true,
  cpt: lifecycle1
};
</script>

<script>
describe("Component lifecycle", function () {

  it("should invoke $contructor and $dispose anytime a new instance is needed", function() {
    var h=ht.newTestContext();
    constructor_counter = dispose_counter = 0;

    wrapper(data).render(h.container);
    expect(h(".content").text()).to.equal('I am component 1');
    expect(constructor_counter).to.equal(1);
    h.$set(data, "visible", false);
    h.$set(data, "visible", true);
    expect(constructor_counter).to.equal(2);

    expect(dispose_counter).to.equal(1);

    h.$dispose();
  });
});

describe("Component used as dynamic <#ref >", function() {

  it("should invoke $constructor at instance creation and $dispose when not needed anymore", function() {
    var h=ht.newTestContext();
    constructor_counter = dispose_counter = 0;

    dynamicWrapper(data).render(h.container);
    expect(h(".content").text()).to.equal('I am component 1');
    expect(constructor_counter).to.equal(1);

    h.$set(data, "cpt", lifecycle2);
    expect(h(".content").text()).to.equal('I am component 2');
    expect(constructor_counter).to.equal(2);

    h.$set(data, "cpt", lifecycle1);
    expect(dispose_counter).to.equal(2);

    h.$dispose();
  });

});
</script>
