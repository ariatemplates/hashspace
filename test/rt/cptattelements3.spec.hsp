<script>
/*
 * Copyright 2013 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var hsp=require("hsp/rt"),
    $set=require("hsp/$set"),
    klass=require("hsp/klass"),
    ht=require("hsp/utils/hashtester");

var ListController = klass({
    $elements: {
        option: {type:"template"} //, maxOccurence:1 ?
    }
});
</script>

<template list using lc:ListController>
    {if !lc.$content} 
        <span class="nodata">Empty list</span>
    {else}
        <ul class="">
            {foreach itm in lc.$content}
                {if itm.tagName==="@option"}
                    <li class="opt"><#itm/></li> // +introduce onclick
                {/if}
            {/foreach}
        </ul>
    {/if}
</template>

<template test1()>
    <#list>
        
    </#list>
</template>

<template test2(d)>
    <#list>
        <@option>First {d.itemName}</@option>
        <@option>Second item</@option>
        <@option>Third {d.itemName}</@option>
    </#list>
</template>

<template test3(d)>
    <#list>
        {if d.displayFirstAndLastItems}
            <@option>First {d.itemName}</@option>

            // keep the previous line to generate a text node containing white spaces
        {/if}
        <@option>Second {d.itemName}</@option>
        {if d.displayFirstAndLastItems}
            {if !d.noLastItem}
                <@option>Last {d.itemName}</@option>
            {/if}
        {/if}
    </#list>
</template>

<template test4(d)>
    <#list>
        <@option>1. First {d.itemName}</@option>
        {foreach idx,itm in d.items}
            <@option>{idx+2}. {itm}</@option>
        {/foreach}
    </#list>
</template>


<script>
var EMPTY_MSG=".nodata";
var OPTIONS="ul .opt";

describe("Component attribute elements (3)", function () {
  
    it("validates static empty list of template sub-elements", function() {
        var h=ht.newTestContext();
        test1().render(h.container);

        expect(h(EMPTY_MSG).length).to.equal(1);
        expect(h(EMPTY_MSG).text()).to.equal("Empty list");
        h.$dispose();
    });

    it("validates static list of template sub-elements", function() {
        var h=ht.newTestContext();
        test2({itemName:"thing"}).render(h.container);

        expect(h(EMPTY_MSG).length).to.equal(0);
        expect(h(OPTIONS).length).to.equal(3);

        expect(h(OPTIONS).item(0).text()).to.equal("First thing");
        expect(h(OPTIONS).item(2).text()).to.equal("Third thing");
        h.$dispose();
    });

    it("validates dynamic list of template sub-elements (if)", function() {
        var h=ht.newTestContext(), d={displayFirstAndLastItems:false,noLastItem:false,itemName:"thing"};
        test3(d).render(h.container);

        expect(h(EMPTY_MSG).length).to.equal(0);
        expect(h(OPTIONS).length).to.equal(1);
        expect(h(OPTIONS).item(0).text()).to.equal("Second thing");

        // then change if condition
        $set(d,"displayFirstAndLastItems",true);
        hsp.refresh();

        expect(h(OPTIONS).length).to.equal(3);
        expect(h(OPTIONS).item(0).text()).to.equal("First thing");
        expect(h(OPTIONS).item(2).text()).to.equal("Last thing");

        // change back condition
        $set(d,"displayFirstAndLastItems",false);
        hsp.refresh();

        expect(h(OPTIONS).length).to.equal(1);
        expect(h(OPTIONS).item(0).text()).to.equal("Second thing");  

        // change the 2 condition
        $set(d,"displayFirstAndLastItems",true);
        $set(d,"noLastItem",true);
        hsp.refresh();

        expect(h(OPTIONS).length).to.equal(2);
        expect(h(OPTIONS).item(0).text()).to.equal("First thing");
        expect(h(OPTIONS).item(1).text()).to.equal("Second thing");

        // set back noLastItem to false
        $set(d,"noLastItem",false);
        hsp.refresh();

        expect(h(OPTIONS).length).to.equal(3);
        expect(h(OPTIONS).item(0).text()).to.equal("First thing");
        expect(h(OPTIONS).item(2).text()).to.equal("Last thing");

        h.$dispose();
    });

    it("validates dynamic list of template sub-elements (foreach)", function() {
        var h=ht.newTestContext();
        var d={itemName:"option",items:["Banana","Apple","Orange"]};
        test4(d).render(h.container);

        expect(h(OPTIONS).length).to.equal(4);
        expect(h(OPTIONS).item(0).text()).to.equal("1. First option");
        expect(h(OPTIONS).item(1).text()).to.equal("2. Banana");
        expect(h(OPTIONS).item(2).text()).to.equal("3. Apple");
        expect(h(OPTIONS).item(3).text()).to.equal("4. Orange");

        // update the array
        d.items.splice(1,0,"Plum");
        hsp.refresh();

        expect(h(OPTIONS).length).to.equal(5);
        expect(h(OPTIONS).item(0).text()).to.equal("1. First option");
        expect(h(OPTIONS).item(1).text()).to.equal("2. Banana");
        expect(h(OPTIONS).item(2).text()).to.equal("3. Plum");
        expect(h(OPTIONS).item(3).text()).to.equal("4. Apple");
        expect(h(OPTIONS).item(4).text()).to.equal("5. Orange");

        // change again
        d.items.splice(0,5);
        hsp.refresh();

        expect(h(OPTIONS).length).to.equal(1);
        expect(h(OPTIONS).item(0).text()).to.equal("1. First option");

        h.$dispose();
    });

    // TODO
    // onContentChange() on controller
    // scope variable exposure
    // support component elements
    // check 3 possible types of elements (template/element/component)

});
</script>
