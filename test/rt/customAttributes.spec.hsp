<script>
var hsp = require("hsp/rt");
var klass = klass=require("hsp/klass");
var $set = require('hsp/$set');
</script>

<template id="test1">
    <div style="height: 20px" verybigdiv>
        <span>Test</span>
    </div>
</template>

<template id="test2">
    <div style="height: 20px" customheightdiv="50">
        <span>Test</span>
    </div>
</template>

<template id="test3" args="ctl">
    <div style="height: 20px" customheightdiv="{ctl.myHeight}" class="{{'active': ctl.isActive}}">
        <span>Test</span>
    </div>
</template>

<template id="test4">
    <div style="height: 20px" customheightdiv="50" verybigdiv>
        <span>Test</span>
    </div>
</template>

<template id="test5">
    <div>
        <div>
            <span customButton>
                <#test1/>
            </span>
        </div>
    </div>
</template>

<template id="test6">
    <div style="height: 20px" customone="50" customtwo>
        <span>Test</span>
    </div>
</template>

<template id="test7">
    <div id="found" verybigdiv>
        <span>
            <button customButton/>
            <input customButton/>
        </span>
    </div>
</template>

<template id="test8" args="d">
    <div style="height: 20px" childca>
        <span>{d.value}</span>
    </div>
</template>

<script>
describe("Custom attributes", function () {

    var status = null;
    var handleAttributeCount = 0;
    beforeEach(function() {
        status = "Dirty";
    });

    var customHandler = klass({
        $constructor: function(nodeInstance) {
            this.node = nodeInstance.node;
        },
        $setValue : function(name, value) {
            if (name == "verybigdiv") {
                expect(value).to.equal("verybigdiv");
                this.node.style.height = "100px";
            }
            else if (name == "customheightdiv") {
                this.node.style.height = value + "px";
            }
            handleAttributeCount++;
            this.node.setAttribute(name, value);
        }
    });

    var customHandler2 = function (nodeInstance, callback) {
        this.node = nodeInstance.node;
    };
    customHandler2.prototype.$setValue = function (name, value) {
        if (name == "verybigdiv") {
            expect(value).to.equal("verybigdiv");
            this.node.style.height = "90px";
        }
    };
    customHandler2.prototype.$dispose = function () {
        status = "Clean";
    };

    var handlerCreationCount = 0;
    var groupHandler = klass({
        $constructor: function(nodeInstance) {
            this.node = nodeInstance.node;
            handlerCreationCount++;
        },
        $setValue : function(name, value) {
            if (name == "customone") {
                this.node.style.height = value + "px";
            }
            if (name == "customtwo") {
                this.node.style.width = "100px";
            }
        }
    });

    var customButtonHandler = klass({
        $constructor: function(nodeInstance) {
            var parent = nodeInstance.getAncestorByCustomAttribute("verybigdiv");
            expect(parent.node.id).to.equal("found");
            var handlers = parent.getCustomAttributeHandlers("verybigdiv");
            expect(handlers.length).to.equal(1);
            handlerCreationCount++;
        }
    });

    var handleContentCount = 0;
    var customChildHandler = klass({
        $onContentRefresh: function() {
            handleContentCount++;
        }
    });

    hsp.registerCustomAttributes("verybigdiv", customHandler, 2);
    hsp.registerCustomAttributes("customheightdiv", customHandler);
    hsp.registerCustomAttributes(["customone", "customtwo"], groupHandler);
    hsp.registerCustomAttributes("customButton", customButtonHandler, 0, ["button"]);
    hsp.registerCustomAttributes("childca", customChildHandler);

    it("tests a simple custom attribute", function () {
        var n = test1();
        expect(n.node.firstChild.style.height).to.equal("100px");
        n.$dispose();
        expect(status).to.equal("Dirty");
    });

    it("tests a custom attribute with static value", function () {
        var n = test2();
        expect(n.node.firstChild.style.height).to.equal("50px");
        n.$dispose();
        expect(status).to.equal("Dirty");
    });

    it("tests a custom attribute with dynamic value", function () {
        var ctl = {
            myHeight: 25
        };
        var n = test3(ctl);
        expect(n.node.firstChild.style.height).to.equal("25px");
        $set(ctl, "myHeight", 90);
        hsp.refresh();
        expect(n.node.firstChild.style.height).to.equal("90px");
        n.$dispose();
        expect(status).to.equal("Dirty");
    });

    it("tests a custom attribute in subtemplate", function () {
        handleAttributeCount = 0;
        var n = test5();
        expect(n.node.querySelector("div[verybigdiv]").style.height).to.equal("100px");
        expect(handleAttributeCount).to.equal(1);
        n.$dispose();
        expect(status).to.equal("Dirty");
    });

    it("tests other attribute changes do not trigger handling", function () {
        handleAttributeCount = 0;
        var ctl = {
            isActive: false,
            myHeight: 25
        };
        var n = test3(ctl);
        expect(n.node.firstChild.className).to.equal("");
        expect(handleAttributeCount).to.equal(1);
        $set(ctl, "isActive", true);
        hsp.refresh();
        expect(n.node.firstChild.className).to.equal("active");
        expect(handleAttributeCount).to.equal(1);
        n.$dispose();
        expect(status).to.equal("Dirty");
    });

    it("tests several custom attributes on same node", function () {
        var n = test4();
        expect(n.node.firstChild.style.height).to.equal("100px");
        n.$dispose();
        expect(status).to.equal("Dirty");
    });

    it("tests a group of attributes", function () {
        handlerCreationCount = 0;
        var n = test6();
        expect(handlerCreationCount).to.equal(1);
        expect(n.node.firstChild.style.height).to.equal("50px");
        expect(n.node.firstChild.style.width).to.equal("100px");
        n.$dispose();
        expect(status).to.equal("Dirty");
    });

    it("tests a custom attribute associated to <button> only", function () {
        handlerCreationCount = 0;
        var n = test7();
        expect(handlerCreationCount).to.equal(1);
        n.$dispose();
        expect(status).to.equal("Dirty");
    });

    it("tests a simple custom attribute with several handlers", function () {
        hsp.registerCustomAttributes("verybigdiv", customHandler2, 1);
        var n = test1();
        expect(n.node.firstChild.style.height).to.equal("90px");
        n.$dispose();
        expect(status).to.equal("Clean");
    });

    it("tests content changes", function() {
        handleContentCount = 0;
        var data = {
            value: "a"
        }
        var n = test8(data);
        var content = n.node.querySelector("span");
        expect(handleContentCount).to.equal(1);
        expect(content.innerHTML).to.equal("a");

        $set(data, "value", "b");
        hsp.refresh();

        expect(handleContentCount).to.equal(2);
        expect(content.innerHTML).to.equal("b");

        n.$dispose();
    });
});
</script>
