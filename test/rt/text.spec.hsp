<script>
/*
 * Copyright 2012 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var hsp=require("hsp/rt"),
    json=require("hsp/json");
</script>

<template id="hello1">
    Hello World!
</template>

<template id="hello2" args="person">
    Hello {person.name}!
</template>

<template id="hello3" args="person">
    Hello {person.firstName} {person.lastName}!
</template>

<script>
// same as hello3 but with unbound variable on the lastName
</script>
<template id="hello4" args="person">
    Hello {person.firstName} {:person.lastName}!
</template>

<script>
// same as hello3 but with a string parameter
</script>
<template id="hello5" args="name">
    Hello {name}!
</template>

<script>
var globalValue="foo";
</script>
<template id="hello6">
    {globalValue}
</template>

<template id="hello7" args="d">
    {concat(d.firstName,d.lastName)}
</template>

<script>
function concat(x,y) {
    return x+"-"+y;
}

function compare(x,y) {
    var r=(x===y);
    return r;
}
</script>

<template id="hello8" args="d">
    {if compare(d.firstName,d.lastName)}
        OK
    {/if}
</template>

<script>
var globalValueInt=0;
</script>
<template id="hello9">
    {globalValueInt}
</template>

<script>
describe("Text Nodes", function () {
    var TEXT_NODE = 3;

    it("checks hello world text node - without any parameter", function () {
        var n = hello1();
        expect(n.node.firstChild.nodeType).to.equal(TEXT_NODE);
        expect(n.node.firstChild.nodeValue).to.equal("Hello World!");
        n.$dispose();
    });

    it("checks hello world text node - with parameter", function () {
        var n = hello2({
            name : "Alexandre"
        });
        expect(n.node.firstChild.nodeValue).to.equal("Hello Alexandre!");
        n.$dispose();
    });

    it("checks hello world text node - with parameter and 2 variables", function () {
        var n = hello3({
            firstName : "Miles",
            lastName : "Davis"
        });
        expect(n.node.firstChild.nodeValue).to.equal("Hello Miles Davis!");
        n.$dispose();
    });

    it("checks hello world with 2 bound variables", function () {
        var dm = {
            firstName : "Daniel",
            lastName : "Kahneman"
        };
        var n = hello3(dm);
        expect(n.node.firstChild.nodeValue).to.equal("Hello Daniel Kahneman!");
        json.set(dm, "lastName", "Craig");
        expect(n.node.firstChild.nodeValue).to.equal("Hello Daniel Kahneman!");
        n.refresh();
        expect(n.node.firstChild.nodeValue).to.equal("Hello Daniel Craig!");
        json.set(dm, "firstName", "Mickey");
        json.set(dm, "lastName", "Mouse");
        n.refresh();
        expect(n.node.firstChild.nodeValue).to.equal("Hello Mickey Mouse!");
        n.$dispose();
    });

    it("checks hello world with 2 different instances & bound properties", function () {
        var dm1 = {
            firstName : "Daniel",
            lastName : "Kahneman"
        };
        var n1 = hello3(dm1);
        var dm2 = {
            firstName : "Charles",
            lastName : "Darwin"
        };
        var n2 = hello3(dm2);

        expect(n1.node.firstChild.nodeValue).to.equal("Hello Daniel Kahneman!");
        expect(n2.node.firstChild.nodeValue).to.equal("Hello Charles Darwin!");

        json.set(dm2, "lastName", "Brown");
        hsp.refresh();

        expect(n1.node.firstChild.nodeValue).to.equal("Hello Daniel Kahneman!");
        expect(n2.node.firstChild.nodeValue).to.equal("Hello Charles Brown!");
        n1.$dispose();
        n2.$dispose();
    });

    it("checks hello world with multiple templates on the same DM, with bound and unbound options", function () {
        var dm = {
            firstName : "Charles",
            lastName : "Darwin"
        };
        var n1 = hello3(dm);
        var n2 = hello3(dm);
        var n3 = hello4(dm);

        expect(n1.node.firstChild.nodeValue).to.equal("Hello Charles Darwin!");
        expect(n2.node.firstChild.nodeValue).to.equal("Hello Charles Darwin!");
        expect(n3.node.firstChild.nodeValue).to.equal("Hello Charles Darwin!");

        json.set(dm, "lastName", "Brown");
        hsp.refresh();
        expect(n1.node.firstChild.nodeValue).to.equal("Hello Charles Brown!");
        expect(n2.node.firstChild.nodeValue).to.equal("Hello Charles Brown!");
        expect(n3.node.firstChild.nodeValue).to.equal("Hello Charles Darwin!"); // unbound case

        n1.$dispose();
        n2.$dispose();
        n3.$dispose();
    });

    it("tests the $dispose method", function () {
        var dm = {
            firstName : "Charles",
            lastName : "Darwin"
        };
        var n = hello3(dm);
        var ch = n.childNodes[0];

        expect(dm[json.MD_OBSERVERS]).not.to.equal(undefined);
        expect(dm[n.MD_ID]).not.to.equal(undefined);
        expect(ch.node).not.to.equal(undefined);

        n.$dispose();
        expect(dm[json.MD_OBSERVERS]).to.equal(undefined);
        expect(n.node).to.equal(null);
        expect(ch.node).to.equal(null);
        expect(dm[n.MD_ID]).to.equal(undefined);
        expect(n.propObs).to.equal(null);

        // check that generator is not impacted by the $dispose call
        n = hello3(dm);
        expect(n.node.firstChild.nodeValue).to.equal("Hello Charles Darwin!");
        json.set(dm, "lastName", "Brown");
        hsp.refresh();
        expect(n.node.firstChild.nodeValue).to.equal("Hello Charles Brown!");
        n.$dispose();
    });

    it("tests a template with a simple string parameter", function () {
        var n = hello5("Bart");

        expect(n.node.firstChild.nodeValue).to.equal("Hello Bart!");
        n.$dispose();
    });

    it("tests an expression referencing a global string value", function () {
        globalValue = "blah blah";
        var n = hello6();

        expect(n.node.firstChild.nodeValue).to.equal("blah blah");
        n.$dispose();
    });

    it("tests an expression referencing a global integer value", function () {
        globalValueInt = 0;
        var n = hello9();

        expect(n.node.firstChild.nodeValue).to.equal("0");
        n.$dispose();
    });

    it("tests refresh when function arguments change", function () {
        var d = {
            firstName : "Omer",
            lastName : "Simpson"
        };
        var n = hello7(d);

        expect(n.node.firstChild.nodeValue).to.equal("Omer-Simpson");

        json.set(d, "firstName", "Marge");
        hsp.refresh();

        expect(n.node.firstChild.nodeValue).to.equal("Marge-Simpson");

        n.$dispose();
    });

    it("tests if update when expression function arguments change", function () {
        var d = {
            firstName : "Omer",
            lastName : "Simpson"
        };
        var n = hello8(d);

        expect(n.node.childNodes.length).to.equal(2);

        json.set(d, "firstName", "Simpson");
        hsp.refresh();

        expect(n.node.childNodes.length).to.equal(3);

        n.$dispose();
    });

});

// TODO test root node with multiple chile nodes
</script>
