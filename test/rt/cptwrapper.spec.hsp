<script>
/*
 * Copyright 2013 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var hsp=require("hsp/rt"),
    json=require("hsp/json"),
    klass=require("hsp/klass"),
    fireEvent=require("hsp/utils/eventgenerator").fireEvent,
    cpt=require("hsp/rt/cptwrapper"),
    ht=require("hsp/utils/hashtester");

// transform a string to a number 
var NBR_DIGITS=/^(\-|\.|\+)?\d+(\.)?(\d+)?$/; 
function getNumber(s) { 
    s=""+s; 
    if (!NBR_DIGITS.test(s)) return null; 
    return Number(s); 
}

var lastNewMinValue=null, isBrCbEmpty=false;

var lib={};
// sample controller
lib.NbrField = klass({ 
  $attributes: {
    "defaultvalue":0, 
    "value":{type:"float",defaultValue:0,binding:"2-way"},
    "min":{type:"float",defaultValue:-Number.MAX_VALUE,binding:"1-way"},
    "max":Number.MAX_VALUE,
    "onbeforereset":{type:"callback"},
    "onafterreset":{type:"callback"}
  },

  $init:function() { 
    this.internalValue=this.value;  // bound to value
    this.isValid=true;              // bound to internalValue, min and max
    this.checkValidity();
  },

  $dispose:function() {
    this.isValid=null;
  },

  $afterRender: function() {
    json.set(this,"value", this.value*2);
  },

  /** 
   * attribute change handlers
   * notify the controller that an external object (template or host) updated the value attribute
   */
  $onValueChange:function(newValue,oldValue) {
    var n=getNumber(newValue);
    json.set(this,"internalValue",n!==null? n : 0); 
    this.checkValidity(); 
  },

  $onMinChange:function(newValue,oldValue) {
    lastNewMinValue=newValue;
    this.checkValidity(); 
  },

  $onMaxChange:function(newValue,oldValue) {
    var n=getNumber(newValue);
    json.set(this,"max",n!==null? n : Number.MAX_VALUE); 
    this.checkValidity(); 
  },

  /** 
   * property change handler
   * notify the controller that the template changed an internal property 
   */ 
  $onInternalValueChange:function(newValue,oldValue) { 
    // validate and expose as attribute if ok
    json.set(this,"value",this.checkValidity()? this.internalValue : this.defaultvalue); 
  }, 

  /** 
   * Check if the internal value is valid and update the isValid property accordingly 
   */ 
  checkValidity:function() { 
    var n=getNumber(this.internalValue); 
    var v=(n===null)? false : (n>=this.min) && (n<=this.max); 
    if (n!==null) {
      this.internalValue=n; // to have a number type
    }
    json.set(this,"isValid",v); 
    return v; 
  },
  /**
   * Reset the field value
   */
  resetField:function() {
    var v1=this.value, v2=this.defaultvalue;
    this.onbeforereset();
    if (this.onbeforereset.isEmpty) {
      isBrCbEmpty=true;
    }
    json.set(this,"internalValue",v2);
    json.set(this,"value",v2);
    this.checkValidity();
    this.onafterreset({oldValue:v1,newValue:v2});
  }
})
</script>

<template nbrfield using c:lib.NbrField>
  <input type="text" model="{c.internalValue}" class="nbrfield {{'error': c.invalidValue, 'mandatory': c.mandatory}}"/>
  <input type="button" value="..." onclick="{c.resetField()}"/>
</template>

<script>
lib.nbrfield=nbrfield;
</script>

<template test(d)>
  <input type="text" value="{d.value}"/>
  <#lib.nbrfield value="{d.value}" min="-10" max="10" onbeforereset="{notifyReset(123,$event)}" 
  onafterreset="{notifyReset2($event.type,$event)}"/>
</template>

<template test2(d)>
  <input type="text" value="{d.value}"/>
  <#lib.nbrfield value="{d.value}" min="-10" max="10"/>
</template>

<script>
var resetCount=0, lastResetArg=0, lastEvtType="";
function notifyReset(arg,evt) {
  resetCount++;
  lastResetArg=arg;
  lastEvtType=evt.type;
}

var lastEvtType2="", lastEvtOldValue2=-1;
function notifyReset2(type,evt) {
  lastEvtType2=type;
  lastEvtOldValue2=evt.oldValue;
}

var TypedCtl=klass({
  $attributes:{
    attint:{type:"int",defaultValue:42},
    attfloat:{type:"float",defaultValue:'12.3'},
    attstring:{type:"string",defaultValue:123},
    attbool:{type:"boolean",defaultValue:false}
  }
});

var HelloCtrl = klass({
    $attributes: {
        "inputChecked" : { type : "boolean" /*, defaultValue: false*/}
    }
});
</script>

<template test3 using ctrl:HelloCtrl>
   <input type="checkbox" model="{ctrl.inputChecked}">
</template>

<script>
describe("Component Nodes", function () {
  var ELEMENT_NODE=1;
  var TEXT_NODE=3;

  it("tests component wrapper", function() {
    var cw=new cpt.CptWrapper(lib.NbrField);
    cw.init();

    var c=cw.cpt;
    expect(c.value).to.equal(0);
    expect(c["+json:observers"].length).to.equal(1);

    json.set(c,"value",42);
    expect(c.internalValue).to.equal(42);

    // test internal binding conversion
    expect(c.$attributes.value._binding).to.equal(2);
    
    json.set(c,"internalValue",12);
    expect(c.value).to.equal(12);
    expect(c.isValid).to.equal(true);

    json.set(c,"internalValue","foo");
    expect(c.value).to.equal(0);
    expect(c.isValid).to.equal(false);

    cw.$dispose();
    expect(cw.cpt).to.equal(null);
    expect(c["+json:observers"]).to.equal(undefined);
    expect(c["+json:observers"]).to.equal(undefined);
  });

  it("tests component wrapper typed attributes + default value", function() {
    var cw=new cpt.CptWrapper(TypedCtl);
    cw.init();
    var c=cw.cpt;

    expect(c.attint).to.equal(42);
    expect(c.attfloat).to.equal(12.3);
    expect(c.attstring).to.equal('123');
    expect(c.attbool).to.equal(false);

    cw.$dispose();
  });

  it("tests component wrapper typed attributes + init value", function() {
    var cw=new cpt.CptWrapper(TypedCtl);
    cw.init({attint:"12",attfloat:"190.2",attbool:'true'});
    var c=cw.cpt;

    expect(c.attint).to.equal(12);
    expect(c.attfloat).to.equal(190.2);
    expect(c.attbool).to.equal(true);

    cw.$dispose();
  });

  it("tests attribute type conversion before change callback is called", function() {
    var cw=new cpt.CptWrapper(lib.NbrField);
    cw.init({min:-123});
    var c=cw.cpt;

    expect(c.min).to.equal(-123);

    // simulate external change
    json.set(c,"min","-10");
    expect(lastNewMinValue).to.equal(-10);
    expect(c.min).to.equal(-10);

    cw.$dispose();
  });

  it("tests a component template load", function() {
    var n=nbrfield();
    var textInput=n.node.firstChild;
    var button=n.node.childNodes[1];
    expect(textInput.nodeType).to.equal(ELEMENT_NODE);
    expect(textInput.attributes.type.value).to.equal("text");
    expect(textInput.value).to.equal("0");

    textInput.value="42";
    fireEvent("click",textInput);

    expect(n.controller.value).to.equal(42);
    expect(n.controller.isValid).to.equal(true);

    textInput.value="foo";
    fireEvent("click",textInput);

    expect(n.controller.value).to.equal(0);
    expect(n.controller.isValid).to.equal(false);

    textInput.value="123.4";
    fireEvent("click",textInput);

    expect(n.controller.value).to.equal(123.4);
    expect(n.controller.isValid).to.equal(true);

    fireEvent("click",button); // reset
    hsp.refresh();  // controller to DOM is only propagated after refresh

    expect(n.controller.value).to.equal(0);
    expect(n.controller.internalValue).to.equal(0);
    expect(textInput.value).to.equal('0');
    expect(n.controller.isValid).to.equal(true);

    var c = n.controller;
    n.$dispose();
    expect(n.controller).to.equal(null);
    expect(c.isValid).to.equal(null);
  });

it("tests a component inside another template", function() {
    var d={value:'42'};
    var n=test(d);

    var textInput=n.node.firstChild;
    var cptInput=n.node.childNodes[2];
    var cptButton=n.node.childNodes[3];
    expect(textInput.value).to.equal('42');
    expect(cptInput.value).to.equal('42');

    cptInput.value="3";
    fireEvent("click",cptInput);     // to trigger data binding
    hsp.refresh();        // to trigger update of the dom

    expect(textInput.value).to.equal('3');
    expect(cptInput.value).to.equal('3');

    cptInput.value="12";  // bigger than max value
    fireEvent("click",cptInput);     // to trigger data binding
    hsp.refresh();        // to trigger update of the dom

    expect(textInput.value).to.equal('0');
    expect(cptInput.value).to.equal('12');

    textInput.value="5";  // check binding in the other way
    fireEvent("click",textInput);
    hsp.refresh();

    expect(textInput.value).to.equal('5');
    expect(cptInput.value).to.equal('5');

    fireEvent("click",cptButton);
    hsp.refresh();

    expect(textInput.value).to.equal('0');
    expect(cptInput.value).to.equal('0');
    
    n.$dispose();
  });

  it("tests a component event callback", function() {
    resetCount=0;
    isBrCbEmpty=false;
    lastResetArg=0;
    lastEvtType="";
    lastEvtType2="";
    var d={value:'42'};
    var n=test(d);

    var cptButton=n.node.childNodes[3];

    fireEvent("click",cptButton);
    hsp.refresh();

    expect(resetCount).to.equal(1); //validate that "onbeforereset" callback has been called
    expect(lastEvtType).to.equal("beforereset");
    expect(isBrCbEmpty).to.equal(true);
    expect(lastResetArg).to.equal(123);
    expect(lastEvtType2).to.equal("afterreset");
    expect(lastEvtOldValue2).to.equal(42);
  });

  it("tests if callback is empty", function() {
    isBrCbEmpty=false;
    var d={value:'42'};
    var n=test2(d);
    var cptButton=n.node.childNodes[3];

    fireEvent("click",cptButton);
    hsp.refresh();

    expect(isBrCbEmpty).to.equal(true); 
  });

  it("tests a component $afterRender callback", function() {
    var d={value:'42'};
    var h=ht.newTestContext();
    test(d).render(h.container);

    expect(d.value).to.equal(84);
    h.$dispose();
  });

  it("validates default boolean attribute value is false", function() {
    var h=ht.newTestContext();
    test3().render(h.container);

    expect(h("input").attribute("checked")).to.equal(false);
    h("input").click();
    expect(h("input").attribute("checked")).to.equal(true);
    h.$dispose();
  });

});
</script>
