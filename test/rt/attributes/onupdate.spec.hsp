<script>
/*
 * Copyright 2014 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var hsp = require("hsp/rt");
var $set = require('hsp/$set');
var fireEvent = require("hsp/utils/eventgenerator").fireEvent;
</script>

<template id="test1" args="model">
    <input type="text" model="{model.value}" onupdate="{model.cb(event)}" update-timeout="1000"/>
</template>

<template id="test2" args="model">
    <textarea model="{model.value}" onupdate="{model.cb(event)}"/>
</template>

<script>
describe("onupdate attribute", function () {

    var clock;
    beforeEach(function () {
         clock = sinon.useFakeTimers();
     });

    afterEach(function () {
        clock.restore();
    });

    it("should fire once after a single keystroke", function () {
        var counter = 0;
        var model = {
            value: "",
            cb: function (evt) {
                counter++;
            }
        };
        var n = test1(model);
        var input = n.childNodes[0];
        input.node.value = "a";
        fireEvent("keyup", input.node); // to simulate change
        clock.tick(500);
        expect(counter).to.equal(0);
        clock.tick(600);
        expect(counter).to.equal(1);

        clock.tick(6000);
        expect(counter).to.equal(1);
        n.$dispose();
    });

    it("should fire once after several keystrokes", function () {
        var counter = 0;
        var model = {
            value: "",
            cb: function (evt) {
                counter++;
            }
        };
        var n = test2(model);
        var input = n.childNodes[0];

        expect(counter).to.equal(0);
        input.node.value = "a";
        fireEvent("keyup", input.node); // to simulate change
        clock.tick(300);

        expect(counter).to.equal(0);
        input.node.value = "ab";
        fireEvent("keyup", input.node); // to simulate change
        clock.tick(400);

        expect(counter).to.equal(0);
        input.node.value = "abc";
        fireEvent("keyup", input.node); // to simulate change
        clock.tick(600);

        expect(counter).to.equal(1);
        clock.tick(6000);
        expect(counter).to.equal(1);
        n.$dispose();
    });

    it("should fire twice after 2 sequences of keystrokes", function () {
        var counter = 0;
        var model = {
            value: "",
            cb: function (evt) {
                counter++;
            }
        };
        var n = test1(model);
        var input = n.childNodes[0];

        expect(counter).to.equal(0);
        input.node.value = "a";
        fireEvent("keyup", input.node); // to simulate change
        clock.tick(500);

        expect(counter).to.equal(0);
        input.node.value = "ab";
        fireEvent("keyup", input.node); // to simulate change
        clock.tick(1200);

        expect(counter).to.equal(1);
        input.node.value = "abc";
        fireEvent("keyup", input.node); // to simulate change
        clock.tick(6000);

        expect(counter).to.equal(2);
        n.$dispose();
    });

    it("should not fire after a $dispose ", function () {
        var counter = 0;
        var model = {
            value: "",
            cb: function (evt) {
                counter++;
            }
        };
        var n = test1(model);
        var input = n.childNodes[0];
        input.node.value = "a";
        fireEvent("keyup", input.node); // to simulate change

        n.$dispose();
        clock.tick(5000);
        expect(counter).to.equal(0);        
    });

});
</script>
