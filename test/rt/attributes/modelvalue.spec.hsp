/*
 * Copyright 2014 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var hsp=require("hsp/rt"),
    fireEvent=require("hsp/utils/eventgenerator").fireEvent,
    json=require("hsp/json"),
    ht=require("hsp/utils/hashtester");

{template inputSample(data)}
    <div class="info section">All the following inputs are synchronized:</div>
    <div class="section">
        Comment #1: <input id="1" type="text" value="{data.comment}"/><br/>
        Comment #2: <input id="2" type="text" model="{data.comment}"/><br/>
        Comment #3: <span class="inputText">{data.comment}</span><br/>
    </div>
    <div class="section">
        <input id="cb1" type="checkbox" value="{data.isChecked}"/>
        <label for="cb1">Check me!</label> -
        <input id="cb2" type="checkbox" model="{data.isChecked}"/>
        <label for="cb2">Check me (2)!</label> -
        Checked: <span class="textValue">{data.isChecked}</span>
    </div>
    <div class="section">
        <input id="rb1" type="radio" model="{data.selection}" value="A"/>
        <label for="rb1">Select A</label> -
        <input id="rb2" type="radio" model="{data.selection}" value="B"/>
        <label for="rb2">Select B</label> -
        <input id="rb3" type="radio" model="{data.selection}" value="C"/>
        <label for="rb3">Select C</label> -
        Selection in model: <span class="textValue">{data.selection}</span>
    </div>
{/template}

{template enterEmptiesFieldSample(object)}
    <div class="info section">Please type a command and press enter.</div>
    <pre>{object.commandsHistory}</pre>
    <input type="text" value="{object.value}" onkeydown="{object.keydown(event)}" placeholder="Your command"><br>
    <input type="text" value="{object.value}" onkeydown="{object.keydown(event)}" placeholder="Your command"><br>
{/template}

{template html5NumberInput(model)}
    <div><input type="number" model="{model.value}"/></div>
{/template}

describe("Input Elements", function () {
    it("input model sync", function () {
        var v1 = "init value";
        var enterKeyDownCalled = 0;
        var object = {
            commandsHistory: "",
            value: v1,
            keydown: function (event) {
              if (event.keyCode == 13) { // enter key
                enterKeyDownCalled++;
                json.set(this, "commandsHistory", this.commandsHistory + "\n" + this.value);
                json.set(this, "value", ""); // this should empty the field
              }
            }
        };
        var n = enterEmptiesFieldSample(object);
        var input1 = n.childNodes[2];
        var input2 = n.childNodes[4];

        expect(input1.node.value).to.equal(v1);
        expect(input2.node.value).to.equal(v1);

        // test with input 1
        var v2 = "new value";
        input1.node.value = v2;
        fireEvent("keydown", input1.node);
        fireEvent("keyup", input1.node);
        hsp.refresh();

        expect(object.value).to.equal(v2);
        expect(input1.node.value).to.equal(v2);
        expect(input2.node.value).to.equal(v2);

        expect(enterKeyDownCalled).to.equal(0);
        fireEvent("keydown", input1.node, {keyCode: 13});
        fireEvent("keyup", input1.node, {keyCode: 13});
        expect(enterKeyDownCalled).to.equal(1);
        hsp.refresh();

        expect(object.value).to.equal("");
        expect(input1.node.value).to.equal("");
        expect(input2.node.value).to.equal("");

        // test with input 2
        var v3 = "other value";
        input2.node.value = v3;
        fireEvent("keydown", input2.node);
        fireEvent("keyup", input2.node);
        hsp.refresh();

        expect(object.value).to.equal(v3);
        expect(input1.node.value).to.equal(v3);
        expect(input2.node.value).to.equal(v3);

        expect(enterKeyDownCalled).to.equal(1);
        fireEvent("keydown", input2.node, {keyCode: 13});
        fireEvent("keyup", input2.node, {keyCode: 13});
        expect(enterKeyDownCalled).to.equal(2);
        hsp.refresh();

        expect(object.value).to.equal("");
        expect(input1.node.value).to.equal("");
        expect(input2.node.value).to.equal("");
    });

    it("validates text elements", function () {
        var v1 = "edit me!";
        var d = {
            comment : v1,
            isChecked : false,
            selection : "B"
        };
        var n = inputSample(d);

        var input1 = n.childNodes[1].childNodes[1];
        var input2 = n.childNodes[1].childNodes[4];

        expect(input1.node.value).to.equal(v1);
        expect(input2.node.value).to.equal(v1);

        // change value from the model
        var v2 = "foo";
        json.set(d, "comment", v2);
        hsp.refresh();
        expect(input1.node.value).to.equal(v2);
        expect(input2.node.value).to.equal(v2);

        // change the value from input1 (value attribute)
        var v3 = "bar2";
        input1.node.value = v3;
        fireEvent("keyup",input1.node); // to simulate change
        expect(input1.node.value).to.equal(v3);
        expect(input2.node.value).to.equal(v3);
        expect(d.comment).to.equal(v3);

        // change the value from input2 (model attribute)
        var v4 = "blah";
        input2.node.value = v4;
        fireEvent("keyup",input2.node); // to simulate change
        expect(input1.node.value).to.equal(v4);
        expect(input2.node.value).to.equal(v4);
        expect(d.comment).to.equal(v4);

        n.$dispose();
    });

    it("validates checkbox elements", function () {
        var d = {
            comment : "foo",
            isChecked : true,
            selection : "B"
        };
        var n = inputSample(d);

        var cb1 = n.childNodes[2].childNodes[0];
        var cb2 = n.childNodes[2].childNodes[3];

        // TODO: fix following lines in IE8
        expect(cb1.node.checked).to.equal(true);
        expect(cb2.node.checked).to.equal(true);

        // change from data model
        json.set(d, "isChecked", false);
        hsp.refresh();
        expect(cb1.node.checked).to.equal(false);
        expect(cb2.node.checked).to.equal(false);
        expect(d.isChecked).to.equal(false);

        // change from cb1 (value reference)
        fireEvent("click",cb1.node);
        if (cb1.node.checked) {
            // on firefox calling click doesn't trigger the onclick event!?
            expect(cb1.node.checked).to.equal(true);
            expect(cb2.node.checked).to.equal(true);
            expect(d.isChecked).to.equal(true);
        }

        // change from cb2 (model reference)
        fireEvent("click",cb2.node);
        expect(cb1.node.checked).to.equal(false);
        expect(cb2.node.checked).to.equal(false);
        expect(d.isChecked).to.equal(false);

        n.$dispose();
    });

    it("validates radio elements", function () {
        var d = {
            comment : "foo",
            isChecked : true,
            selection : "B"
        };
        var n = inputSample(d);

        var rb1 = n.childNodes[3].childNodes[0];
        var rb2 = n.childNodes[3].childNodes[3];

        expect(rb1.node.checked).to.equal(false);
        // TODO fix next line in IE8
        expect(rb2.node.checked).to.equal(true);

        // change from data model
        json.set(d, "selection", "C");
        hsp.refresh();
        expect(rb1.node.checked).to.equal(false);
        expect(rb2.node.checked).to.equal(false);

        // change from rb1
        fireEvent("click",rb1.node);
        expect(rb1.node.checked).to.equal(true);
        expect(rb2.node.checked).to.equal(false);
        expect(d.selection).to.equal("A");

        n.$dispose();
    });

    it("should not fail on HTML5 input elements in browsers that dont support them", function() {
        var n = html5NumberInput({value: 5});
    });
});

{template test1(data)}
    <textarea rows="4" cols="40"  model="{data.text}"/>
{/template}

// normalize carriage returns to avoid OS discrepancies
function normalizeCR(s) {
    return s.replace(/\r\n|[\r\n]/gi,"\n");
}

describe("Textarea Elements", function () {
    it("validates model synchronization", function () {
        var h=ht.newTestContext();
        var model={text:"line 1\nline2"};

        test1(model).render(h.container);
        expect(normalizeCR(h("textarea").value())).to.equal("line 1\nline2");

        // change value from the DOM
        h("textarea").type("AAA\nBBB\nCCC");
        expect(normalizeCR(model.text)).to.equal("AAA\nBBB\nCCC"); 

        // change value from the model
        h.$set(model,"text","Hello\nWorld!");
        expect(normalizeCR(h("textarea").value())).to.equal("Hello\nWorld!");

        h.$dispose();
    });
});
