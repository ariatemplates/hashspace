<script>
var klass=require("hsp/klass"),
    hsp=require("hsp/rt"),
    fireEvent=require("hsp/utils/eventgenerator").fireEvent,
    json=require("hsp/json");

// Simple component controller used to test binding types
var Cpt1 = klass({
  $attributes:{
    value:{type:"int",defaultValue:0,binding:"2-way"},
    max:{type:"int",defaultValue:1000,binding:"1-way"},
    defaultvalue:{type:"int",defaultValue:0,binding:"none"} // used in case of error
  },
  $init:function() {
    this.onMaxChangeCount=0;
    this.onDefaultValueChangeCount=0;
  },
  $onValueChange:function(newValue,oldValue) {
    if (this.value>this.max) {
      json.set(this,"value",this.defaultvalue)
    }
  },
  $onMaxChange:function(newValue,oldValue) {
    this.onMaxChangeCount++;
    if (this.value>this.max) {
      json.set(this,"value",this.defaultvalue)
    }
  },
  $onDefaultvalueChange:function(newValue,oldValue) {
    this.onDefaultValueChangeCount++;
  }
});
</script>

<template cpt1 using c:Cpt1>
  <input type="text" value="{c.value}"/>
</template>

<template test(d)>
  <#cpt1 value="{d.value}" max="{d.max}" defaultvalue="{d.defaultvalue}"/>
  <input type="text" value="{d.value}"/>
  <input type="text" value="{d.max}"/>
  <input type="text" value="{d.defaultvalue}"/>
</template>

<script>
var checks=[], lastInitValue=null, dataValue=null;
var Cpt2 = klass({
  $attributes:{
    value:{type:"string", binding:"2-way",onchange:"check"},
    initvalue:{type:"int",defaultValue:0,binding:"none"},
    data:{type:"object",defaultValue:{foo:"bar"},binding:"1-way"}
  },
  $init:function() {
    lastInitValue=this.initvalue;
    dataValue=this.data;
  },
  $onDataChange:function() {
    dataValue=this.data;
  },
  check:function(newValue,oldValue) {
    checks.push({n:newValue,o:oldValue});
  }
});
</script>

<template cpt2 using c:Cpt2>
  <input type="text" value="{c.value}"/>
</template>

<template test2(d)>
  <#cpt2 value="{d.value}" initvalue="10"/>
</template>

<template test3(d)>
  <#cpt2 value="{d.value}" data="{d.data}"/>
</template>

<script>
var setFieldValue=function(field,value) {
  // helper function
  field.value=""+value;
  fireEvent("click",field); // to trigger change
  hsp.refresh();            // to force refresh
}

describe("Component attributes binding", function () {

  it("tests component attribute binding modes", function() {
    var d={value:2,max:100,defaultvalue:42};
    var n=test(d);

    expect(n.node.childNodes.length).to.equal(6); // 4+2comments
    var cptInput=n.node.childNodes[1];
    var c=n.childNodes[0].controller;
    var valueInput=n.node.childNodes[3];
    var maxInput=n.node.childNodes[4];
    var defaultInput=n.node.childNodes[5];

    expect(cptInput.value).to.equal("2");
    expect(valueInput.value).to.equal("2");

    // set new value
    setFieldValue(valueInput,"5");

    expect(cptInput.value).to.equal("5");

    // set too big value
    setFieldValue(valueInput,"1000");

    expect(cptInput.value).to.equal("42"); // defaultvalue

    // change value in component
    setFieldValue(cptInput,"9");

    expect(valueInput.value).to.equal("9"); // bi-directional binding effect

    // change max
    setFieldValue(maxInput,"10000");

    expect(c.onMaxChangeCount).to.equal(1);
    expect(c.max).to.equal(10000);

    // set max on controller
    json.set(c,"max",50);
    hsp.refresh();

    expect(maxInput.value).to.equal("10000"); // 1-way binding so change is not propagated

    // change default value from template field
    setFieldValue(defaultInput,"31");

    expect(c.onDefaultValueChangeCount).to.equal(0); // no binding so change cb is not called
    expect(c.defaultvalue).to.equal(42);

    // change value in the controller
    json.set(c,"defaultvalue",10);
    hsp.refresh();

    expect(c.onDefaultValueChangeCount).to.equal(0); // no binding so change cb is not called
    expect(c.defaultvalue).to.equal(10); // of course value has changed as we must be able to change it internally!

    n.$dispose();
  });

  it("tests component attribute onchange property", function() {
    var d={value:"a"};
    var n=test2(d);
    checks=[];

    expect(n.node.childNodes.length).to.equal(3); // 1+2comments
    var cptInput=n.node.childNodes[1];

    setFieldValue(cptInput,"b");
    expect(checks.length).to.equal(1);
    expect(checks[0].n).to.equal("b");

    json.set(d,"value","c");
    hsp.refresh();

    expect(checks.length).to.equal(2);
    expect(checks[1].n).to.equal("c");

    n.$dispose();
  });

  it("tests unbound attribute type conversion", function() {
    var d={value:"a"};
    lastInitValue=0;

    var n=test2(d);
    expect(lastInitValue).to.equal(10);
    expect(dataValue.foo).to.equal("bar"); // default object validation

    n.$dispose();
  });

  it("tests object attribute change", function() {
    var d={value:"a"};
    d.data={blah:123};
    var n=test3(d);

    expect(dataValue).to.equal(d.data);
    // change data
    var x={a:"b"};
    json.set(d,"data",x);
    hsp.refresh();

    expect(dataValue).to.equal(x);
    n.$dispose();
  });

});
</script>
