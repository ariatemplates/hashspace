<script>
/*
 * Copyright 2012 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var hsp=require("hsp/rt"),
    json=require("hsp/json");
</script>

<template id="test1" args="person">
    {if (person.firstName)}
        Hello {person.firstName}
    {/if}
</template>

<template id="test2" args="person">
    {if person.firstName}
        <h2>Hello {person.firstName}</h2>
        {if (person.favouriteDish)}
            <span class="dish">Your preferred dish: {person.favouriteDish}</span>
        {/if}
    {else}
        <div class="noname">
            Hello {person.lastName}
        </div>
    {/if}
</template>

<template id="test3" args="person">
    Hello 
    {if person.firstName}
        {person.firstName}!
    {/if}
</template>

<template id="test4" args="person">
    Hello 
    // test literal as if parameter - even if it doesn't really make sense, should still be supported - e.g. for debugging purposes
    {if (true)}
        {person.firstName}!
    {/if}
</template>

<template id="test5" args="data">
  {if (data.value === "test" || data.value===false || data.value===null || data.value===123)} 
    Hello
  {/if}
</template>

<template id="test6">
  {if (!false)} 
    Hello
  {/if}
</template>

<script>
describe("If Node", function () {
    var COMMENT_NODE = 8;

    it("tests a simple if condition without any else statement", function () {
        var dm = {
            firstName : "Omer",
            lastName : "Simpson"
        };
        var n = test1(dm);
        expect(n.node.firstChild.nodeType).to.equal(COMMENT_NODE);
        expect(n.node.firstChild.nodeValue).to.equal("# if");
        expect(n.node.childNodes.length).to.equal(3);
        expect(n.node.childNodes[1].nodeValue).to.equal("Hello Omer ");

        // change first name and check update
        json.set(dm, "firstName", "Marge");
        hsp.refresh();
        expect(n.node.childNodes[1].nodeValue).to.equal("Hello Marge ");

        json.set(dm, "firstName", null);
        hsp.refresh();
        expect(n.node.childNodes.length).to.equal(2);

        n.$dispose();
    });

    it("tests nested if and else statements", function () {
        var dm = {
            firstName : "Omer",
            lastName : "Simpson"
        };
        var n = test2(dm);

        expect(n.node.childNodes[1].nodeName).to.equal("H2");
        expect(n.node.childNodes[1].firstChild.nodeValue).to.equal("Hello Omer");
        expect(n.node.childNodes.length).to.equal(5);
        expect(n.node.childNodes[3].nodeName).to.equal("#comment");

        json.set(dm, "favouriteDish", "Donuts");
        hsp.refresh();
        expect(n.node.childNodes.length).to.equal(6);
        expect(n.node.childNodes[3].nodeName).to.equal("SPAN");
        expect(n.node.childNodes[3].firstChild.nodeValue).to.equal("Your preferred dish: Donuts");

        json.set(dm, "firstName", null);
        hsp.refresh();
        expect(n.node.childNodes.length).to.equal(3);
        expect(n.node.childNodes[1].nodeName).to.equal("DIV");
        expect(n.node.childNodes[1].firstChild.nodeValue).to.equal("Hello Simpson ");

        n.$dispose();
    });

    it("tests the $dispose behaviour", function () {
        var dm = {
            firstName : "Omer",
            lastName : "Simpson",
            favouriteDish : "Donuts"
        };
        var n = test2(dm);

        var n1 = n.childNodes[0].childNodes[0];
        var n2 = n.childNodes[0].childNodes[1].childNodes[0];
        expect(n1.tag).to.equal("h2");
        expect(n1.node).not.to.equal(null);
        expect(n2.tag).to.equal("span");
        expect(n2.node).not.to.equal(null);

        // moving to the else statement will automatically dispose the elements of the main block
        json.set(dm, "firstName", null);
        hsp.refresh();
        expect(n1.node).to.equal(null);
        expect(n.childNodes[0].childNodes[0].tag).to.equal("div");
        expect(n2.node).to.equal(null);

        json.set(dm, "firstName", "Marge");
        hsp.refresh();
        expect(n.childNodes[0].childNodes[0].tag).to.equal("h2");
        n2 = n.childNodes[0].childNodes[1].childNodes[0];
        expect(n2.node).not.to.equal(null);

        n.$dispose();
        expect(n2.node).to.equal(null);
    });

    it("tests multiple nodes at root level", function () {
        var dm = {
            firstName : "Omer",
            lastName : "Simpson",
            favouriteDish : "Donuts"
        };
        var n = test3(dm);

        expect(n.childNodes.length).to.equal(2);
        var ch1 = n.childNodes[1];
        var ch2 = n.childNodes[1].childNodes[0];
        expect(ch1.node).not.to.equal(null);
        expect(ch2.node.nodeValue).to.equal("Omer! ");
        n.$dispose();
        expect(n.childNodes).to.equal(null);
        expect(ch1.node).to.equal(null);
        expect(ch2.node).to.equal(null);
    });

    it("tests literal value as if condition", function () {
        var dm = {
            firstName : "Omer",
            lastName : "Simpson",
            favouriteDish : "Donuts"
        };
        var n = test4(dm);
        expect(n.childNodes.length).to.equal(2);
        var ch1 = n.childNodes[1];
        var ch2 = n.childNodes[1].childNodes[0];
        expect(ch1.node).not.to.equal(null);
        expect(ch2.node.nodeValue).to.equal("Omer! ");
        n.$dispose();
    });

    it("tests jsexpression as if condition", function () {
        var dm = {
            value : 123
        };
        var n = test5(dm);
        expect(n.childNodes.length).to.equal(1);
        var if1 = n.childNodes[0];
        expect(if1.childNodes.length).to.equal(1);
        var text1 = if1.childNodes[0];
        expect(text1.node.nodeValue).to.equal("Hello ");

        json.set(dm, "value", "foo");
        hsp.refresh();
        expect(if1.childNodes).to.equal(null);

        json.set(dm, "value", "test");
        hsp.refresh();
        expect(if1.childNodes.length).to.equal(1);
        text1 = if1.childNodes[0];
        expect(text1.node.nodeValue).to.equal("Hello ");

        n.$dispose();
    });

    it("tests jsexpression as if condition w/o any argument", function () {
        var n = test6();
        expect(n.childNodes.length).to.equal(1);
        var if1 = n.childNodes[0];
        expect(if1.childNodes.length).to.equal(1);
        var text1 = if1.childNodes[0];
        expect(text1.node.nodeValue).to.equal("Hello ");

        n.$dispose();
    });

});
</script>
