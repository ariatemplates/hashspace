<script>
var Class = require("hsp/klass");

var SplitterCtrl = Class({
    $attributes: {
        "type": { type: "string", defaultValue: "horizontal" },
        "size": { type: "int", defaultValue: 3 },
        "onrelease": { type: "callback" }
    },

    $init: function() {
        document.onmousemove = this.onMouseMove.bind(this);
        document.onmouseup = this.onMouseUp.bind(this);
    },

    $dispose: function() {
        document.onmousevent = null;
        document.onmouseup = null;
    },

    $refresh: function() {
        if (!this.proxy) {
            this.handle = this.$getElement(0);
            this.proxy = this.$getElement(1);
        }
    },

    onMouseDown: function(event) {
        this.active = true;
        var position = this.getNewPos(event);
        this.updatePos(this.proxy, position);
        event.preventDefault();
    },

    onMouseMove: function(event) {
        if (this.active) {
            var position = this.getNewPos(event);
            this.updatePos(this.proxy, position);
            event.preventDefault();
        }
    },

    onMouseUp: function(event) {
        if (this.active) {
            var newHandlePosition = this.afterMouseUp(event);
            this.onrelease({position: newHandlePosition});
            event.preventDefault();
        }
    },

    afterMouseUp: function(event) {
        this.active = false;
        var position = this.getNewPos(event);
        this.updatePos(this.handle, position);
        return position;
    },

    getNewPos: function(event) {
        var parent = this.handle.parentNode;
        var offset;

        if (this.type == "vertical") {
            offset = parent.offsetTop;
            return Math.ceil(event.pageY - offset - (this.size / 2));
        } else {
            offset = parent.offsetLeft;
            return Math.ceil(event.pageX - offset - (this.size / 2));
        }
    },

    updatePos: function(element, position) {
        element.style[this.type === "vertical" ? "top" : "left"] = position + "px";
    }
});
</script>

<template splitter using controller:SplitterCtrl>
    <div class="splitter" onmousedown="{controller.onMouseDown($event)}"></div>
    <div class="splitter-proxy {{'splitter-proxy-hidden': !controller.active}}"></div>
</template>

<script>
module.exports = splitter;
</script>
