<script>
var klass=require("hsp/klass");

function calculateNoOfPages(collectionSize, pageSize) {
    return Math.ceil(collectionSize / pageSize);
}

function rebuildPagesModel(noOfPages) {
    var pages = [];
    for (var i=0; i<noOfPages; i++) {
        pages.push(i);
    }
    return pages;
}

function rebuildInternalModel(ctl) {
   ctl.noOfPages = calculateNoOfPages(ctl.collectionsize, ctl.pagesize);
   ctl.pages = rebuildPagesModel(ctl.noOfPages);
   ctl.selectPage(ctl.activepage);
}

var Pagination=klass({
    $attributes: {
      "collectionsize":{type:"int", defaultValue:0, binding:"1-way"},
      "pagesize":{type:"int", defaultValue:10, binding:"1-way"},
      "activepage":{type:"int", defaultValue:0, binding:"2-way"},
      "onpageselect":{type:"callback"}
    },
    $init:function() {
       rebuildInternalModel(this);
    },
    selectPage: function(newPageNo) {
        newPageNo = Math.min(Math.max(0, newPageNo), this.noOfPages-1);
        if (this.activepage!==newPageNo) {
          this.activepage = newPageNo;
          this.onpageselect({pageNumber:this.activepage});
        }
    },
    $onCollectionsizeChange: function() {
        rebuildInternalModel(this);
    },
    $onPagesizeChange: function() {
       rebuildInternalModel(this);
    }
});
</script>

<template pagination using p:Pagination>
    <ul class="pagination">
        <li class="{{'disabled':p.activepage===0}}">
            <a href="javascript:void(0)" onclick="{p.selectPage(p.activepage-1)}">Previous</a>
        </li>
        {foreach page in p.pages}
            <li class="{{'active':page==p.activepage}}">
                <a href="javascript:void(0)" onclick="{p.selectPage(page)}">{page + 1}</a>
            </li>
        {/foreach}
        <li class="{{'disabled':p.activepage>=p.noOfPages-1}}">
            <a href="javascript:void(0)" onclick="{p.selectPage(p.activepage+1)}">Next</a>
        </li>
    </ul>
</template>

<template paginationTest(model)>
  <div class="section3">
    <label class="fieldlabel">Active page: </label><input type="number"  model="{model.active}"/><br/>
    <label class="fieldlabel">Collection size: </label><input type="number"  model="{model.collectionSize}"/><br/>
    <label class="fieldlabel">Page size: </label><input type="number"  model="{model.pageSize}"/><br/>
    Last page selection  <i> - from event</i>: <span class="textValue">{model.lastSelectedPage}</span>
  </div>
  <#pagination activepage="{model.active}" collectionsize="{model.collectionSize}"
    pagesize="{model.pageSize}" onpageselect="{updateSelection($event.pageNumber)}"/>

</template>

<script>
var model = {
    active: 4,
    collectionSize: 99,
    pageSize: 10,
    lastSelectedPage: "(...)"
}

function updateSelection(newPageNumber) {
  model.lastSelectedPage = newPageNumber;
}

// Needed by the playground application.
// Update it, but do not remove it!
module.exports = {
    template: paginationTest,
    data: [model]
};
</script>
