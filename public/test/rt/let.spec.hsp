 
/*
 * Copyright 2014 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var hsp=require("hsp/rt"),
    $set=require("hsp/$set"),
    klass=require("hsp/klass"),
    log=require("hsp/rt/log"),
    ht=require("hsp/utils/hashtester");

# template test1(d)
    {let x=d.value, y=x+3}
    <div class="foo">
        Blah
        {x}
    </div>
    <span class="bar">
        {y+'AL'}
    </span>
# /template

# template test2(d)
    <div class="foo">
        {let x=d.value+' World'}
        {x}
    </div>
    <span class="bar">
        {x}
    </span>
# /template

# template test3(d)
    <div class="foo">
        {if d.condition}
            {let x=d.value1+' World'}
            x: {x} - y: {y}
        {else}
            {let y=d.value2}
            x: {x} - y: {y}
        {/if}
    </div>
# /template

describe("Let statement", function () {
  
    it("validates let in template scope", function() {
        var h=ht.newTestContext(), d={value:"hello"};
        test1(d).render(h.container);

        expect(h(".foo").text()).to.equal("Blah hello ");
        expect(h(".bar").text()).to.equal("hello3AL ");

        // change value dynamically
        h.$set(d,"value","salut");

        expect(h(".foo").text()).to.equal("Blah salut ");
        expect(h(".bar").text()).to.equal("salut3AL ");
        expect(h.logs().length).to.equal(0);
        
        h.$dispose();
    });

    it("validates let in element scope", function() {
        var h=ht.newTestContext(), d={value:"Hello"};
        test2(d).render(h.container);

        expect(h(".foo").text()).to.equal("Hello World ");
        expect(h(".bar").text()).to.equal(" ");

        // change value dynamically
        h.$set(d,"value","How are you");

        expect(h(".foo").text()).to.equal("How are you World ");
        expect(h(".bar").text()).to.equal(" ");
        expect(h.logs().length).to.equal(0);
    });

    it("validates let in {if} scope", function() {
        var h=ht.newTestContext(), d={condition:true,value1:"Hello",value2:"How are you?"};
        test3(d).render(h.container);

        expect(h(".foo").text()).to.equal("x: Hello World - y:  ");

        // change condition dynamically
        h.$set(d,"condition",false);

        expect(h(".foo").text()).to.equal("x:  - y: How are you? ");

        // change back
        h.$set(d,"condition",true);

        expect(h(".foo").text()).to.equal("x: Hello World - y:  ");    
        expect(h.logs().length).to.equal(0);
    });

});
