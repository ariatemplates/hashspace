var klass=require("hsp/klass"),
    hsp=require("hsp/rt"),
    fireEvent=require("hsp/utils/eventgenerator").fireEvent,
    json=require("hsp/json");

// Simple component controller used to test binding types
var Cpt1 = klass({ 
  attributes:{ 
    value:{type:"int",defaultValue:0,binding:"2-way"}, 
    max:{type:"int",defaultValue:1000,binding:"1-way"},
    defaultvalue:{type:"int",defaultValue:0,binding:"none"} // used in case of error
  },
  $init:function() {
    this.onMaxChangeCount=0;
    this.onDefaultValueChangeCount=0;
  },
  onValueChange:function(newValue,oldValue) {
    if (this.value>this.max) {
      json.set(this,"value",this.defaultvalue)
    }
  },
  onMaxChange:function(newValue,oldValue) {
    this.onMaxChangeCount++;
    if (this.value>this.max) {
      json.set(this,"value",this.defaultvalue)
    }
  },
  onDefaultvalueChange:function(newValue,oldValue) {
    this.onDefaultValueChangeCount++;
  }
});

# template cpt1 using c:Cpt1
  <input type="text" value="{c.value}"/>
# /template

# template test(d)
  <#cpt1 value="{d.value}" max="{d.max}" defaultvalue="{d.defaultvalue}"/>
  <input type="text" value="{d.value}"/>
  <input type="text" value="{d.max}"/>
  <input type="text" value="{d.defaultvalue}"/>
# /template

var setFieldValue=function(field,value) {
  // helper function
  field.value=""+value;
  fireEvent("click",field); // to trigger change
  hsp.refresh();      // to force refresh
}

describe("Component attributes binding", function () {

  it("tests component attribute binding modes", function() {
    var d={value:2,max:100,defaultvalue:42};
    var n=test(d);

    expect(n.node.childNodes.length).to.equal(4);
    var cptInput=n.node.childNodes[0];
    var c=n.childNodes[0].controller;
    var valueInput=n.node.childNodes[1];
    var maxInput=n.node.childNodes[2];
    var defaultInput=n.node.childNodes[3];
    
    expect(cptInput.value).to.equal("2");
    expect(valueInput.value).to.equal("2");

    // set new value
    setFieldValue(valueInput,"5");

    expect(cptInput.value).to.equal("5");

    // set too big value
    setFieldValue(valueInput,"1000");

    expect(cptInput.value).to.equal("42"); // defaultvalue

    // change value in component
    setFieldValue(cptInput,"9");

    expect(valueInput.value).to.equal("9"); // bi-directional binding effect

    // change max
    setFieldValue(maxInput,"10000");

    expect(c.onMaxChangeCount).to.equal(1);
    expect(c.max).to.equal(10000);

    // set max on controller
    json.set(c,"max",50);
    hsp.refresh();

    expect(maxInput.value).to.equal("10000"); // 1-way binding so change is not propagated

    // change default value from template field
    setFieldValue(defaultInput,"31");

    expect(c.onDefaultValueChangeCount).to.equal(0); // no binding so change cb is not called
    expect(c.defaultvalue).to.equal(42);

    // change value in the controller
    json.set(c,"defaultvalue",10);
    hsp.refresh();

    expect(c.onDefaultValueChangeCount).to.equal(0); // no binding so change cb is not called
    expect(c.defaultvalue).to.equal(10); // of course value has changed as we must be able to change it internally!

    n.$dispose();
  });

});
