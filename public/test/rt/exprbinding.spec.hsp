/*
 * Copyright 2014 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var $set=require("hsp/$set"),
    ht=require("hsp/utils/hashtester");

function changeValueAndObject (data,val) {
    $set(data,"object",{value:val})
}

function changeValue (data,val) {
    $set(data.object,"value",val);
}

# template test1(data) 
    <input class="in1" type="text" value="{data.object.value}" />
    <input class="in2" type="text" value="{data.object.value}" />
# /template

# template header(document)
  <div class="title"> 
      {if document && document.title}
        {document.title}
      {else}
        Untitled document
      {/if}
  </div>
# /template

# template test2(data)
   <#header document="{data.document}" />
# /template


# template title(document)
  {if document && document.title}
    {document.title}
  {else}
    No title
  {/if}
# /template

# template test3(data)
  <div class="content">
    <#title document="{data.document}" />
  </div>
# /template

describe("Expression Bindings", function () {
    var INPUT1=".in1", INPUT2=".in2";

    it("validates bindings with value change", function() {
        var h=ht.newTestContext(), dm={object:{value:"initial value"}};
        test1(dm).render(h.container);

        expect(h(INPUT1).value()).to.equal("initial value");
        expect(h(INPUT2).value()).to.equal("initial value");

        changeValue(dm,"v1");
        h.refresh();

        expect(h(INPUT1).value()).to.equal("v1");
        expect(h(INPUT2).value()).to.equal("v1");

        h.$dispose();
    });

    it("validates bindings with path change", function() {
        var h=ht.newTestContext(), dm={object:{value:"initial value"}};
        test1(dm).render(h.container);

        changeValueAndObject(dm,"v1");
        h.refresh();

        expect(h(INPUT1).value()).to.equal("v1");
        expect(h(INPUT2).value()).to.equal("v1");

        changeValue(dm,"v2");
        h.refresh();

        expect(h(INPUT1).value()).to.equal("v2");
        expect(h(INPUT2).value()).to.equal("v2");

        changeValueAndObject(dm,"v3");
        h.refresh();

        expect(h(INPUT1).value()).to.equal("v3");
        expect(h(INPUT2).value()).to.equal("v3");

        h.$dispose();
    });

    it("validates handling of null and deleted values", function() {
        var h=ht.newTestContext(), dm={document:{title:"No title"}};
        test2(dm).render(h.container);

        expect(h(".title").text()).to.equal("No title ");

        // change data
        h.$set(dm,"document",null);
        expect(h(".title").text()).to.equal("Untitled document ");

        // set back
        h.$set(dm,"document",{title:"Doc 1"});
        expect(h(".title").text()).to.equal("Doc 1 ");

        // delete data
        delete dm.document;
        h.refresh();
        expect(h(".title").text()).to.equal("Untitled document ");

        h.$dispose();
    });

    it("validates expression handling when observable pairs are set to null", function() {
        var h=ht.newTestContext(), dm={};
        test3(dm).render(h.container);

        expect(h("div.content").text()).to.equal("No title ");

        // create document
        h.$set(dm,"document",{title:"foo"});
        expect(h("div.content").text()).to.equal("foo ");

        // change title
        h.$set(dm.document,"title","f");
        expect(h("div.content").text()).to.equal("f ");

        // empty title
        h.$set(dm.document,"title","");
        expect(h("div.content").text()).to.equal("No title ");

        // change title
        h.$set(dm.document,"title","bar");
        expect(h("div.content").text()).to.equal("bar ");

        h.$dispose();
    });
});
