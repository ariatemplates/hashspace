 
/*
 * Copyright 2013 Amadeus s.a.s.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var hsp=require("hsp/rt"),
    $set=require("hsp/$set"),
    klass=require("hsp/klass"),
    ht=require("hsp/utils/hashtester");

// sample controller
PanelController = klass({ 
  attributes: {
    "expanded":{type:"boolean",binding:"2-way"},
    "head":{type:"template"}, 
    "body":{type:"template", defaultContent:true}
  }
});

// sample panel template
# template panel using c:PanelController
  <div class="panel">
    {if c.head}
      <div class="head">
        <#c.head/>
      </div>
    {/if}
    <div class="body">
      <#c.body/>
    </div>
    {if c.footer}
      <div class="footer">TODO</div>
    {/if}
  </div>
# /template

# template test1(m)
  Sample panel:
  <#panel>
    <@body>
      {m.text}!
    </@body>
  </#panel>
# /template

# template test2()
  Sample panel:
  <#panel body="Hello World!"/>
# /template

# template test3(m)
  Sample panel:
  <#panel body="{m.text}!"/>
# /template

# template test4(m)
  Sample panel:
  <#panel>{m.text}!</#panel>
# /template

var HEAD=".panel .head";
var BODY=".panel .body";

describe("Template as component attribute (1)", function () {
  
  it("tests template attribute passed as sub-element", function() {
    var h=ht.newTestContext();
    var m={text:"Hello World"}
    test1(m).render(h.container);
    var head=h(HEAD);
    var body=h(BODY);
    expect(head.length).to.equal(0);
    expect(body.length).to.equal(1);
    expect(body.text()).to.equal("Hello World! ");

    // dynamic property change
    $set(m,"text","Hello folks");
    hsp.refresh();

    expect(body.text()).to.equal("Hello folks! ");
    
    h.$dispose();
  });

  it("tests template attribute passed as static text attribute", function() {
    var h=ht.newTestContext();
    test2().render(h.container);
    
    expect(h(HEAD).length).to.equal(0);
    expect(h(BODY).length).to.equal(1);
    expect(h(BODY).text()).to.equal("Hello World!");

    h.$dispose();
  });

  it("tests template attribute passed as dynamic text attribute", function() {
    var h=ht.newTestContext();
    var m={text:"Hello World"}
    test3(m).render(h.container);
    
    expect(h(HEAD).length).to.equal(0);
    expect(h(BODY).length).to.equal(1);
    expect(h(BODY).text()).to.equal("Hello World!");

    // dynamic property change
    $set(m,"text","Hello folks");
    hsp.refresh();

    expect(h(BODY).text()).to.equal("Hello folks!");
    
    h.$dispose();
  });

  it("tests default template attribute passed as node content", function() {
    var h=ht.newTestContext();
    var m={text:"Hello World"}
    test4(m).render(h.container);
    
    expect(h(BODY).length).to.equal(1);
    expect(h(BODY).text()).to.equal("Hello World!");

    // dynamic property change
    $set(m,"text","Hello folks");
    hsp.refresh();

    expect(h(BODY).text()).to.equal("Hello folks!");
    
    h.$dispose();
  });

  // TODO
  // properly dispose generated properties
  // test errors when sub-template attribute are improperly mixed
  // test that template attribute can be generated dynamically
  // test that template attriubte can be created/deleted dynamically

});
