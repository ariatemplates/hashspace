##### Template:
# template test(person)
	Before
	{content1()}
	{content2("First Name", person.firstName)}
	After
# /template

##### Parsed Tree:
[
  {
    "type": "template",
    "name": "test",
    "args": ["person"],
    "content": [
      {type: "text", "value": "Before "},
      {type: "expression", "category": "jsexpression", "expType": "FunctionCall", bound:true, 
        "name": {
          "type": "Variable",
          "name": "content1"
        },
        "arguments": []
      },
      {type: "text", "value": " "},
      {type: "expression", "category": "jsexpression", "expType": "FunctionCall", bound:true, 
        name:{
          "type": "Variable",
          "name": "content2"
        }, 
        arguments:[
          {type:"expression", category:"string", value:"First Name"},
          {type:"PropertyAccess", base:{type:"Variable",name:"person"}, name:"firstName"}
      ]},
      {type: "text", "value": " After"}
    ]
  }
]

##### Syntax Tree:
[
  {
    "type": "template",
    "name": "test",
    "args": ["person"],
    "content": [
      {type: "text", "value": "Before "},
      {type: "insert", path:["_content1"], args:[]},
      {type: "text", "value": " "},
      {type: "insert", path:["_content2"], args:[
          {type:"expression", category:"string", value:"First Name"},
          {type:"expression", category:"objectref", path:["person","firstName"]}
      ]},
      {type: "text", "value": " After"}
    ]
  }
]

##### Template Code
test=[
    n.$text(0,["Before "]),
    n.$insert({e1:[4,1,_content1]},1),
    n.$text(0,[" "]),
    n.$insert({e1:[4,1,_content2,0,"First Name",1,2],e2:[1,2,"person","firstName"]},1),
    n.$text(0,[" After"])
]
