var $set=require("hsp/$set"); 
// ################################################################ 
//  This file has been generated by the hashspace compiler          
//  Direct MODIFICATIONS WILL BE LOST when the file is recompiled!  
// ################################################################ 

var klass=require("hsp/klass");

var CITIES={
	"SFO":{city:"San Francisco",offset:-8},
	"PAR":{city:"Paris",offset:+1},
	"TYO":{city:"Tokyo",offset:+9}
}

var ClockController=klass({
	attributes:{
		"city":{type:"string",binding:"1-way",defaultValue:"PAR"}
	},
	$init:function() {
		$set(this, "minuteMarkers", []); // list of minute markers
		for (var i=0;60>i;i++) {
			$set(this.minuteMarkers, i, {major:(i%5===0)});
		}
		this.onCityChange();
		$set(this, "_iid", setInterval(this.tick.bind(this),100));
	},
	$dispose:function() {
		clearInterval(this._iid);
	},
	onCityChange:function() {
		// dynamic city change: check city validity and refresh the display
		if (!CITIES[this.city]) {
			// unsupported city
			$set(this, "city", "PAR"); // default
		}
		this.tick();
	},
	tick:function() {
		var d=new Date();
		var to=CITIES[this.city].offset;
		var o=d.getTimezoneOffset()/60;
		d=new Date(d.getTime()+ ((o+to)*3600000)); // date in the target city
		$set(this, "hours", d.getHours());
		$set(this, "minutes", d.getMinutes());
		$set(this, "seconds", d.getSeconds());
		$set(this, "milliseconds", d.getMilliseconds());
		$set(this, "cityName", CITIES[this.city].city);
	}
});


var clock = require("hsp/rt").template({ctl:[ClockController,"ClockController"],ref:"c"}, function(n){
  var _c,_m,_idx;try {_c=c} catch(e) {_c=n.g('c')};try {_m=m} catch(e) {_m=n.g('m')};try {_idx=idx} catch(e) {_idx=n.g('idx')};
  var __s = {c : typeof c === 'undefined' ? n.g('c') : c, m : typeof m === 'undefined' ? n.g('m') : m, idx : typeof idx === 'undefined' ? n.g('idx') : idx};
  return [__s,n.$text(0,[" "]),n.elt("div",0,{"class":"square"},0,[n.elt("svg",0,{"viewBox":"0 0 100 100"},0,[n.elt("g",0,{"transform":"translate(50,50)"},0,[n.elt("circle",0,{"class":"clock-face","r":"48"},0),n.$text(0,[" "]),n.$foreach({e1:[9,"c.minuteMarkers"]},"idx","m",0,1,[n.$text(0,[" "]),n.elt("line",{e1:[9,"{'major':m.major,'minor':!m.major}"],e2:[9,"m.major?35:42"],e3:[9,"360*idx/c.minuteMarkers.length"]},{"class":["",1],"y1":["",2],"y2":"45","transform":["rotate(",3,")"]},0)]),n.$text(0,["  "]),n.elt("line",{e1:[9,"30*c.hours+c.minutes/2"]},{"class":"hour","y1":"2","y2":"-20","transform":["rotate(",1,")"]},0),n.$text(0,[" "]),n.elt("line",{e1:[9,"6*c.minutes+c.seconds/10"]},{"class":"minute","y1":"4","y2":"-30","transform":["rotate(",1,")"]},0),n.$text(0,[" "]),n.elt("g",{e1:[9,"6*(c.seconds+c.milliseconds*0.001)"]},{"transform":["rotate(",1,")"]},0,[n.elt("line",0,{"class":"second","y1":"10","y2":"-38"},0),n.elt("line",0,{"class":"second-counterweight","y1":"10","y2":"2"},0)])])]),n.elt("div",0,{"class":"city"},0,[n.$text({e1:[9,"c.cityName"]},["",1])])])];
});

var demo = require("hsp/rt").template([], function(n){
  var _clock;try {_clock=clock} catch(e) {_clock=n.g('clock')};
  var __s = {clock : typeof clock === 'undefined' ? n.g('clock') : clock};
  return [__s,n.cpt([_clock,"clock"],0,{"city":"SFO"},0),n.cpt([_clock,"clock"],0,{"city":"PAR"},0),n.cpt([_clock,"clock"],0,{"city":"TYO"},0)];
});


// Needed by the playground application.
// Update it, but do not remove it!
$set(module, "exports", {
    template: demo
});