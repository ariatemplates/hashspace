var $set=require("hsp/$set"); 
// ################################################################ 
//  This file has been generated by the hashspace compiler          
//  Direct MODIFICATIONS WILL BE LOST when the file is recompiled!  
// ################################################################ 
var test = require("hsp/rt").template(["ctxt"], function(n){
  var _swapTemplate,_ctxt;try {_swapTemplate=swapTemplate} catch(e) {_swapTemplate=n.g('swapTemplate')};try {_ctxt=ctxt} catch(e) {_ctxt=n.g('ctxt')};
  var __s = {swapTemplate : typeof swapTemplate === 'undefined' ? n.g('swapTemplate') : swapTemplate, ctxt : typeof ctxt === 'undefined' ? n.g('ctxt') : ctxt};
  return [__s,n.elt("div",0,0,0,[n.elt("a",{e1:[9,"swapTemplate()"]},{"href":"javascript:void(0)"},{"click":1},[n.$text(0,["Change template"])])]),n.cpt([null,"ctxt","view"],{e1:[9,"ctxt"]},{"ctxt":["",1]},0)];
});

var tplA = require("hsp/rt").template(["ctxt"], function(n){
  var _ctxt;try {_ctxt=ctxt} catch(e) {_ctxt=n.g('ctxt')};
  var __s = {ctxt : typeof ctxt === 'undefined' ? n.g('ctxt') : ctxt};
  return [__s,n.elt("div",0,{"class":"msg"},0,[n.$text({e1:[9,"ctxt.msg"]},["A: ",1," "])])];
});

var tplB = require("hsp/rt").template(["ctxt"], function(n){
  var _ctxt;try {_ctxt=ctxt} catch(e) {_ctxt=n.g('ctxt')};
  var __s = {ctxt : typeof ctxt === 'undefined' ? n.g('ctxt') : ctxt};
  return [__s,n.elt("div",0,{"class":"msg"},0,[n.$text({e1:[9,"ctxt.msg2"]},["B: ",1," "])])];
});


var model={
    view: tplA,
    msg: "Hello World",
    msg2: "Always look on the bright side of life!"
}

function swapTemplate() {
    var newtpl=(model.view===tplA)? tplB : tplA;
    $set(model, "view", newtpl);
}


// Needed by the playground application.
// Update it, but do not remove it!
$set(module, "exports", {
    template: test,
    data: [model]
});